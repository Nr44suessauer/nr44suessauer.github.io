{"generatedAt":1746912178159,"generateTime":999,"contents":[{"_path":"/","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"About","description":"Blog from Marc Nauendorf","layout":"default","head":{"title":"DeadlineDriven.dev/elopment"},"body":{"type":"root","children":[{"type":"element","tag":"div","props":{"className":["profile-container"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["profile-content"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["textbox","textbox-green"]},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I'm an engineer and tech enthusiast passionate about creating innovative projects that combine hardware and software – from DIY robotics to IoT and automation. For me, efficiency and creativity are always top priorities."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"div","props":{"className":["profile-card"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["profile-card__image"]},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/mePic.jpg?raw=true","alt":"Marc Nauendorf"},"children":[]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["profile-card__info"]},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"div","props":{"className":["profile-card__contact-item"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"span","props":{"className":["profile-card__icon"]},"children":[{"type":"text","value":"📧"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"span","props":{"className":["profile-card__text"]},"children":[{"type":"element","tag":"a","props":{"href":"mailto:Marc.Nauendorf@hs-heilbronn.de?subject=Anfrage%20von%20der%20Website"},"children":[{"type":"text","value":"Marc.Nauendorf@hs-heilbronn.de"}]}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n      "},{"type":"element","tag":"div","props":{"className":["profile-card__contact-item"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"span","props":{"className":["profile-card__icon"]},"children":[{"type":"text","value":"📍"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"span","props":{"className":["profile-card__text"]},"children":[{"type":"text","value":"Office F718a (Basement)"}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"div","props":{"className":["textbox","textbox-violet"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I'm currently an academic assistant at "},{"type":"element","tag":"a","props":{"href":"https://www.hs-heilbronn.de/en"},"children":[{"type":"text","value":"Hochschule Heilbronn"}]},{"type":"text","value":", where I teach "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pdf/SignalVerarbeitung2ModulHandbuch.pdf"},"children":[{"type":"text","value":"Signal Processing 2"}]},{"type":"text","value":" and "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pdf/RealTImeSystemsModulHandbuch.pdf"},"children":[{"type":"text","value":"Realtime Systems"}]},{"type":"text","value":", along with handling various other responsibilities at the university."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I started deadlinedriven.dev to provide students with tutorials and insights into exciting technical projects. Here, I share my knowledge, experiences, and journey from concept to completion."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"I publish diverse content in the "},{"type":"element","tag":"a","props":{"href":"/articles"},"children":[{"type":"text","value":"article section"}]},{"type":"text","value":", where you can find tutorials, instructions, and more."}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:1.index.md","_source":"content","_file":"1.index.md","_stem":"1.index","_extension":"md"},{"_path":"/articles","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Articles","description":"","layout":"page","body":{"type":"root","children":[{"type":"element","tag":"articles-list","props":{"path":"articles"},"children":[]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:2.articles.md","_source":"content","_file":"2.articles.md","_stem":"2.articles","_extension":"md"},{"_path":"/articles/algo-vertretung-14-04-25","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Traveling Salesman Problem (TSP)","description":"Brute-Force, Nearest Neighbor, and christofilf algorithm ","cover":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/Presentation_with_marp/Pics/Gothic3Map%20-%20Zahlen%20-%20NN.PNG?raw=true","author":{"name":"Marc Nauendorf","avatarUrl":"https://pbs.twimg.com/profile_images/1042510623962275840/1Iw_Mvud_400x400.jpg"},"date":"2025-04-23T00:00:00.000Z","layout":"page","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"traveling-salesman-problem-tsp"},"children":[{"type":"text","value":"Traveling Salesman Problem (TSP)"}]},{"type":"element","tag":"iframe","props":{"src":"https://docs.google.com/viewer?url=https://github.com/Nr44suessauer/nr44suessauer.github.io/raw/main/nuxt-app/assets/Presentation_with_marp/Algo_14.04.2025.pdf&embedded=true","style":"width:100%; height:500px; border:none;"},"children":[]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"div","props":{"className":["notebook-container"],"style":"margin-top: 20px; margin-bottom: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"details","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"summary","props":{"style":"cursor: pointer; font-weight: bold; padding: 10px; background-color: #f0f0f0; border: 1px solid #ccc; border-radius: 5px;"},"children":[{"type":"text","value":"\n            Jupyter Notebook: SalesMan Problem Neuste & Complete Version (Click to Show/Hide)\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"style":"border: 1px solid #ddd; padding: 15px; margin-top: 10px; background-color: #f9f9f9;"},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"iframe","props":{"src":"https://nbviewer.org/github/Nr44suessauer/SalesMan/blob/main/SalesMan_Problem.ipynb","width":"100%","height":800,"style":"border: none;","allowFullScreen":true},"children":[{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{"style":"text-align: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/SalesMan/blob/main/SalesMan_Problem.ipynb","target":"_blank"},"children":[{"type":"text","value":"\n                    Open Notebook on GitHub\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"title","props":{},"children":[{"type":"text","value":"Algorithm Animations"}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n        /* Common styles */\n        canvas {\n            border: 1px solid black;\n            display: block;\n        }   \n        /* Christofides styles */\n        .container {\n            display: flex;\n        }\n        .animation-container {\n            flex: 1;\n        }\n        #infoPanel {\n            flex: 0 0 500px;\n            margin-left: 20px;\n            background: #f2f2f2;\n            padding: 10px;\n            font-family: sans-serif;\n            font-size: 14px;\n            overflow-y: auto;\n            max-height: 900px;\n        }\n        .controls > div {\n            margin: 10px 0;\n        }\n        .controls > div > * {\n            margin-right: 10px;\n        }\n        #speedSlider,\n        #numPoints {\n            transform: scale(1);\n            transform-origin: left center;\n        }     \n        /* Nearest Neighbor styles */\n        .nn-container {\n            display: flex;\n        }\n        .nn-animation-container {\n            flex: 1;\n        }\n        #nnInfoPanel {\n            flex: 0 0 500px;\n            margin-left: 20px;\n            background: #f2f2f2;\n            padding: 10px;\n            font-family: sans-serif;\n            font-size: 14px;\n            overflow-y: auto;\n            max-height: 900px;\n        }\n        #nnCanvas {\n            border: 1px solid black;\n            display: block;\n        }\n        .nn-controls > div {\n            margin: 10px 0;\n        }\n        .nn-controls > div > * {\n            margin-right: 10px;\n        }\n        .selection-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin: 10px 0;\n        }\n        .selection-table th, .selection-table td {\n            border: 1px solid #ddd;\n            padding: 4px;\n            text-align: center;\n        }\n        .selection-table .selected {\n            background-color: #d4ffd4;\n            font-weight: bold;\n        }\n        /* Dark Mode anpassungen für Tabellen */\n        @media (prefers-color-scheme: dark) {\n            .selection-table th, .selection-table td {\n                border-color: #555;\n            }\n            .selection-table .selected {\n                background-color: #2a472a;\n                font-weight: bold;\n            }\n            /* Verbesserte Sichtbarkeit für den Haken im Dark Mode */\n            .selection-table td:last-child {\n                color: #fff;\n            }\n            /* Hervorgehobene Markierung für den kürzesten Pfad */\n            .selection-table .selected td:last-child {\n                color: #4CAF50;\n                font-size: 1.2em;\n                font-weight: bold;\n            }\n            /* Verbesserte Sichtbarkeit für die Jupyter Notebook Buttons im Dark Mode */\n            .notebook-container details summary, \n            details.notebook-details summary, \n            body.dark-mode .notebook-container details summary,\n            body.dark-theme .notebook-container details summary {\n                background-color: #444 !important;\n                color: #fff !important;\n                border-color: #666 !important;\n            }\n        }\n        /* Brute Force styles */\n        .bf-container {\n            display: flex;\n        }\n        .bf-animation-container {\n            flex: 1;\n        }\n        #bfInfoPanel {\n            flex: 0 0 500px;\n            margin-left: 20px;\n            background: #f2f2f2;\n            padding: 10px;\n            font-family: sans-serif;\n            font-size: 14px;\n            overflow-y: auto;\n            max-height: 900px;\n        }\n        #bfCanvas {\n            border: 1px solid black;\n            display: block;\n        }\n        .bf-controls > div {\n            margin: 10px 0;\n        }\n        .bf-controls > div > * {\n            margin-right: 10px;\n        }\n    "}]},{"type":"element","tag":"h3","props":{"id":"brute-force-algorithm"},"children":[{"type":"text","value":"Brute Force Algorithm"}]},{"type":"element","tag":"div","props":{"className":["bf-container"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["bf-animation-container"]},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"className":["bf-controls"]},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Next Step"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{"style":"background-color: #ff5555; color: white;"},"children":[{"type":"text","value":"Reset"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Start/Stop Animation"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["bfSpeedSlider"]},"children":[{"type":"text","value":"Speed:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"range","id":"bfSpeedSlider","min":"50","max":"4000","step":"1","value":"300"},"children":[]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n                "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["bfNumPoints"]},"children":[{"type":"text","value":"Number of points:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"number","id":"bfNumPoints","min":"3","max":"25","value":"4","style":"width:50px; height:30px;"},"children":[]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Random Points"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Import Christofides Points"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Import NN-Points"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["bfStartPoint"]},"children":[{"type":"text","value":"Start point:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"number","id":"bfStartPoint","min":"0","max":"24","value":"0","style":"width:50px; height:30px;"},"children":[]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Set Start Point"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"select","props":{"id":"bfConstellationSelect","style":"height:30px;"},"children":[{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":""},"children":[{"type":"text","value":"Choose constellation..."}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"libra"},"children":[{"type":"text","value":"Libra - 10 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"orion"},"children":[{"type":"text","value":"Orion - 10 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"ursa_minor"},"children":[{"type":"text","value":"Ursa Minor - 7 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cassiopeia"},"children":[{"type":"text","value":"Cassiopeia - 5 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cygnus"},"children":[{"type":"text","value":"Cygnus - 9 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"ursa_major"},"children":[{"type":"text","value":"Ursa Major - 7 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"leo"},"children":[{"type":"text","value":"Leo - 9 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"draco"},"children":[{"type":"text","value":"Draco - 11 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"gemini"},"children":[{"type":"text","value":"Gemini - 9 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"southern_cross"},"children":[{"type":"text","value":"Southern Cross - 4 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"pegasus"},"children":[{"type":"text","value":"Pegasus - 5 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"andromeda"},"children":[{"type":"text","value":"Andromeda - 7 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"sagittarius"},"children":[{"type":"text","value":"Sagittarius - 8 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"scorpius"},"children":[{"type":"text","value":"Scorpius - 10 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cancer"},"children":[{"type":"text","value":"Cancer - 6 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"pisces"},"children":[{"type":"text","value":"Pisces - 11 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"aquila"},"children":[{"type":"text","value":"Aquila - 7 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"hercules"},"children":[{"type":"text","value":"Hercules - 8 points"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"myrtana"},"children":[{"type":"text","value":"Myrtana - 5 Punkte"}]},{"type":"text","value":"\n                    "}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Download Graph"}]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"canvas","props":{"id":"bfCanvas","width":800,"height":600},"children":[]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"id":"bfInfoPanel"},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"h3","props":{"id":"brute-force-data"},"children":[{"type":"text","value":"Brute Force Data"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"id":"bfDataOutput"},"children":[{"type":"text","value":"Waiting for the first step..."}]},{"type":"text","value":"\n            "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Show/Hide Table"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"id":"bfFullTable","style":"display: none; margin-top: 20px;"},"children":[]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"element","tag":"div","props":{"className":["notebook-container"],"style":"margin-top: 20px; margin-bottom: 20px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"details","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"summary","props":{"style":"cursor: pointer; font-weight: bold; padding: 10px; background-color: #f0f0f0; border: 1px solid #ccc; border-radius: 5px;"},"children":[{"type":"text","value":"\n                Jupyter Notebook: Brute Force TSP Implementation (Click to Show/Hide)\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"style":"border: 1px solid #ddd; padding: 15px; margin-top: 10px; background-color: #f9f9f9;"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"iframe","props":{"src":"https://nbviewer.org/github/Nr44suessauer/SalesMan/blob/main/BruteForce_TSP.ipynb","width":"100%","height":800,"style":"border: none;","allowFullScreen":true},"children":[{"type":"text","value":"\n                "}]},{"type":"text","value":"\n                "},{"type":"element","tag":"p","props":{"style":"text-align: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/SalesMan/blob/main/BruteForce_TSP.ipynb","target":"_blank"},"children":[{"type":"text","value":"\n                        Open Notebook on GitHub\n                    "}]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 10px;"},"children":[]},{"type":"element","tag":"h3","props":{"id":"nearest-neighbor-algorithm"},"children":[{"type":"text","value":"Nearest Neighbor Algorithm"}]},{"type":"element","tag":"div","props":{"className":["nn-container"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["nn-animation-container"]},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"className":["nn-controls"]},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Nächster Schritt"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{"style":"background-color: #ff5555; color: white;"},"children":[{"type":"text","value":"Reset"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Animation Start/Stop"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["nnSpeedSlider"]},"children":[{"type":"text","value":"Geschwindigkeit:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"range","id":"nnSpeedSlider","min":"50","max":"4000","step":"1","value":"300"},"children":[]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n                "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["nnNumPoints"]},"children":[{"type":"text","value":"Anzahl der Punkte:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"number","id":"nnNumPoints","min":"3","max":"25","value":"4","style":"width:50px; height:30px;"},"children":[]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Zufällige Punkte"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Christofides Punkte importieren"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"BF-Punkte importieren"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["nnStartPoint"]},"children":[{"type":"text","value":"Startpunkt:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"number","id":"nnStartPoint","min":"0","max":"24","value":"0","style":"width:50px; height:30px;"},"children":[]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Startpunkt setzen"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{"style":"background-color: #4CAF50; color: white;"},"children":[{"type":"text","value":"Besten Startpunkt finden"}]},{"type":"text","value":"\n                    "},{"type":"text","value":"\n                    "},{"type":"element","tag":"select","props":{"id":"nnConstellationSelect","style":"height:30px;"},"children":[{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":""},"children":[{"type":"text","value":"Sternenbild wählen..."}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"libra"},"children":[{"type":"text","value":"Waage (Libra) - 10 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"orion"},"children":[{"type":"text","value":"Orion - 10 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"ursa_minor"},"children":[{"type":"text","value":"Kleiner Bär - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cassiopeia"},"children":[{"type":"text","value":"Kassiopeia - 5 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cygnus"},"children":[{"type":"text","value":"Schwan - 9 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"ursa_major"},"children":[{"type":"text","value":"Großer Bär - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"leo"},"children":[{"type":"text","value":"Löwe - 9 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"draco"},"children":[{"type":"text","value":"Drache - 11 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"gemini"},"children":[{"type":"text","value":"Zwillinge - 9 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"southern_cross"},"children":[{"type":"text","value":"Kreuz des Südens - 4 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"pegasus"},"children":[{"type":"text","value":"Pegasus - 5 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"andromeda"},"children":[{"type":"text","value":"Andromeda - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"sagittarius"},"children":[{"type":"text","value":"Schütze - 8 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"scorpius"},"children":[{"type":"text","value":"Skorpion - 10 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cancer"},"children":[{"type":"text","value":"Krebs - 6 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"pisces"},"children":[{"type":"text","value":"Fische - 11 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"aquila"},"children":[{"type":"text","value":"Adler - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"hercules"},"children":[{"type":"text","value":"Herkules - 8 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"myrtana"},"children":[{"type":"text","value":"Myrtana - 5 Punkte"}]},{"type":"text","value":"\n                    "}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Graph herunterladen"}]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"canvas","props":{"id":"nnCanvas","width":800,"height":600},"children":[]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"id":"nnInfoPanel"},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"h3","props":{"id":"nearest-neighbor-daten"},"children":[{"type":"text","value":"Nearest Neighbor Daten"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"id":"nnDataOutput"},"children":[{"type":"text","value":"Warte auf den ersten Schritt..."}]},{"type":"text","value":"\n            "},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"text","value":"\n            "},{"type":"element","tag":"label","props":{"htmlFor":["nnStepDropdown"]},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Schritte:"}]}]},{"type":"text","value":"\n            "},{"type":"element","tag":"select","props":{"id":"nnStepDropdown"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"option","props":{"value":""},"children":[{"type":"text","value":"Schritt auswählen..."}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Tabelle ein-/ausblenden"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"id":"nnStepDetails"},"children":[]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"id":"nnFullTable","style":"display: none; margin-top: 20px;"},"children":[]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"element","tag":"div","props":{"className":["notebook-container"],"style":"margin-top: 20px; margin-bottom: 20px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"details","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"summary","props":{"style":"cursor: pointer; font-weight: bold; padding: 10px; background-color: #f0f0f0; border: 1px solid #ccc; border-radius: 5px;"},"children":[{"type":"text","value":"\n                Jupyter Notebook: Nearest Neighbor TSP Implementation (Klicken zum Anzeigen/Ausblenden)\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"style":"border: 1px solid #ddd; padding: 15px; margin-top: 10px; background-color: #f9f9f9; width: 100%;"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"iframe","props":{"src":"https://nbviewer.org/github/Nr44suessauer/SalesMan/blob/main/NearestNeighbor_TSP.ipynb","width":"100%","height":800,"style":"border: none;","allowFullScreen":true},"children":[{"type":"text","value":"\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"     "},{"type":"element","tag":"p","props":{"style":"text-align: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/SalesMan/blob/main/NearestNeighbor_TSP.ipynb","target":"_blank"},"children":[{"type":"text","value":"\n                        Notebook auf GitHub öffnen\n                    "}]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 10px;"},"children":[]},{"type":"element","tag":"h3","props":{"id":"christofides-algorithm"},"children":[{"type":"text","value":"Christofides Algorithm"}]},{"type":"element","tag":"div","props":{"className":["container"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["animation-container"]},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"className":["controls"]},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Nächster Schritt"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{"style":"background-color: #ff5555; color: white;"},"children":[{"type":"text","value":"Reset"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Animation Start/Stop"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["speedSlider"]},"children":[{"type":"text","value":"Geschwindigkeit:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"range","id":"speedSlider","min":"50","max":"4000","step":"1","value":"300"},"children":[]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n                "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["numPoints"]},"children":[{"type":"text","value":"Anzahl der Punkte:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"number","id":"numPoints","min":"3","max":"25","value":"4","style":"width:50px; height:30px;"},"children":[]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Zufällige Punkte"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"NN-Punkte importieren"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"BF-Punkte importieren"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"label","props":{"htmlFor":["startPointChristofides"]},"children":[{"type":"text","value":"Startpunkt:"}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"input","props":{"type":"number","id":"startPointChristofides","min":"0","max":"24","value":"0","style":"width:50px; height:30px;"},"children":[]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Startpunkt setzen"}]},{"type":"text","value":"\n                    "},{"type":"text","value":"\n                    "},{"type":"element","tag":"select","props":{"id":"constellationSelect","style":"height:30px;"},"children":[{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":""},"children":[{"type":"text","value":"Sternenbild wählen..."}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"libra"},"children":[{"type":"text","value":"Waage (Libra) - 10 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"orion"},"children":[{"type":"text","value":"Orion - 10 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cassiopeia"},"children":[{"type":"text","value":"Kassiopeia - 5 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cygnus"},"children":[{"type":"text","value":"Schwan - 9 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"ursa_major"},"children":[{"type":"text","value":"Großer Bär - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"leo"},"children":[{"type":"text","value":"Löwe - 9 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"draco"},"children":[{"type":"text","value":"Drache - 11 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"gemini"},"children":[{"type":"text","value":"Zwillinge - 9 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"southern_cross"},"children":[{"type":"text","value":"Kreuz des Südens - 4 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"pegasus"},"children":[{"type":"text","value":"Pegasus - 5 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"andromeda"},"children":[{"type":"text","value":"Andromeda - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"sagittarius"},"children":[{"type":"text","value":"Schütze - 8 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"scorpius"},"children":[{"type":"text","value":"Skorpion - 10 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"cancer"},"children":[{"type":"text","value":"Krebs - 6 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"pisces"},"children":[{"type":"text","value":"Fische - 11 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"aquila"},"children":[{"type":"text","value":"Adler - 7 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"hercules"},"children":[{"type":"text","value":"Herkules - 8 Punkte"}]},{"type":"text","value":"\n                        "},{"type":"element","tag":"option","props":{"value":"myrtana"},"children":[{"type":"text","value":"Myrtana - 5 Punkte"}]},{"type":"text","value":"\n                    "}]},{"type":"text","value":"\n                    "},{"type":"element","tag":"button","props":{},"children":[{"type":"text","value":"Graph herunterladen"}]},{"type":"text","value":"\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"canvas","props":{"id":"canvas","width":800,"height":600},"children":[]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"id":"infoPanel"},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"h3","props":{"id":"christofides-algorithm-daten"},"children":[{"type":"text","value":"Christofides Algorithm Daten"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"id":"dataOutput"},"children":[{"type":"text","value":"Warte auf den ersten Schritt..."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"element","tag":"div","props":{"className":["notebook-container"],"style":"margin-top: 20px; margin-bottom: 20px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"details","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"summary","props":{"style":"cursor: pointer; font-weight: bold; padding: 10px; background-color: #f0f0f0; border: 1px solid #ccc; border-radius: 5px;"},"children":[{"type":"text","value":"\n                Jupyter Notebook: Christofides TSP Implementation (Klicken zum Anzeigen/Ausblenden)\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"div","props":{"style":"border: 1px solid #ddd; padding: 15px; margin-top: 10px; background-color: #f9f9f9; width: 100%;"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"iframe","props":{"src":"https://nbviewer.org/github/Nr44suessauer/SalesMan/blob/main/Christofides_TSP.ipynb","width":"100%","height":800,"style":"border: none;","allowFullScreen":true},"children":[{"type":"text","value":"\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{"style":"text-align: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/SalesMan/blob/main/Christofides_TSP.ipynb","target":"_blank"},"children":[{"type":"text","value":"\n                    Notebook auf GitHub öffnen\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"element","tag":"script","props":{},"children":[{"type":"text","value":"\n    // Funktion zur Erkennung des Dark Mode\n    function isDarkMode() {\n        return document.documentElement.getAttribute('data-theme-setting') === \"dark\" ||\n            (document.documentElement.getAttribute('data-theme-setting') === null && \n             window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches);\n    }\n// Funktion zur Bestimmung der Koordinatensystemfarbe basierend auf dem Theme\n\n// Funktion zur Bestimmung der Koordinatensystemfarbe basierend auf dem Theme\nfunction getGridColor() {\n    // Im Light Mode die Standardfarbe verwenden\n    return isDarkMode() ? \"#999\" : \"#ccc\";\n}\n\n// Funktion zur Bestimmung der Textfarbe basierend auf dem Theme\nfunction getTextColor() {\n    // Im Light Mode die Standardfarbe \"black\" verwenden\n    return isDarkMode() ? \"#fff\" : \"black\";\n}\n\n// Funktion zur Bestimmung der Punktfarbe basierend auf dem Theme\nfunction getPointColor() {\n    // Explizit schwarz im Light Mode, weiß im Dark Mode\n    return isDarkMode() ? \"#ffffff\" : \"#000000\";\n}\n\n// Funktion zur Anpassung der Info-Panels basierend auf dem Theme\nfunction updateInfoPanelsStyle() {\n    const isDark = isDarkMode();\n    const panels = [\n        document.getElementById('infoPanel'),\n        document.getElementById('nnInfoPanel'),\n        document.getElementById('bfInfoPanel')\n    ];\n    \n    panels.forEach(panel => {\n        if (panel) {\n            if (isDark) {\n                // Im Dark Mode dunklerer Hintergrund und heller Text\n                panel.style.backgroundColor = \"#222\";\n                panel.style.color = \"#fff\";\n                // Tabellenfarben im Dark Mode anpassen\n                const tables = panel.querySelectorAll('table');\n                tables.forEach(table => {\n                    table.style.borderColor = \"#555\";\n                    const cells = table.querySelectorAll('td, th');\n                    cells.forEach(cell => {\n                        cell.style.borderColor = \"#555\";\n                    });\n                });\n            } else {\n                // Im Light Mode heller Hintergrund und dunkler Text\n                panel.style.backgroundColor = \"#f2f2f2\";\n                panel.style.color = \"#000\"; \n                // Standardstile für Tabellen wiederherstellen\n                const tables = panel.querySelectorAll('table');\n                tables.forEach(table => {\n                    table.style.borderColor = \"#ddd\";\n                    const cells = table.querySelectorAll('td, th');\n                    cells.forEach(cell => {\n                        cell.style.borderColor = \"#ddd\";\n                    });\n                });\n            }\n            \n            // Sicherstellen, dass die Änderungen übernommen werden\n            panel.style.transition = \"background-color 0.3s, color 0.3s\";\n        }\n    });\n}\n\n// Direkte Ausführung nach dem Laden - außerhalb des DOMContentLoaded-Events\n(function immediateStyleUpdate() {\n    // Sofortige Ausführung der Stilanpassungen\n    setTimeout(function() {\n        updateInfoPanelsStyle();\n        \n        // Stellen Sie sicher, dass die Canvas-Elemente korrekt gezeichnet werden\n        if (animation) {\n            animation.ctx.clearRect(0, 0, 100, 50);\n            animation.drawNodes(true);\n        }\n        if (nnAnimation) {\n            nnAnimation.ctx.clearRect(0, 0, 100, 50);\n            nnAnimation.drawNodes(true);\n        }\n        if (bfAnimation) {\n            bfAnimation.ctx.clearRect(0, 0, 50, 50);\n            bfAnimation.drawNodes(true);\n        }\n    }, 100);\n})();\n\n// Theme-Anpassungen beim Laden der Seite und bei Änderungen durchführen\ndocument.addEventListener('DOMContentLoaded', function() {\n    updateInfoPanelsStyle();\n    \n    // Beobachte Theme-Änderungen\n    if (window.matchMedia) {\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', function() {\n            updateInfoPanelsStyle();\n            \n            // Nach Änderung des Themes neu zeichnen\n            if (animation) {\n                animation.ctx.clearRect(0, 0, 100, 50);\n                animation.drawNodes(true);\n            }\n            if (nnAnimation) {\n                nnAnimation.ctx.clearRect(0, 0, 100, 50);\n                nnAnimation.drawNodes(true);\n            }\n            if (bfAnimation) {\n                bfAnimation.ctx.clearRect(0, 0, 50, 50);\n                bfAnimation.drawNodes(true);\n            }\n        });\n    }\n});\n\n// Gemeinsame Konstante für die Sternbildkoordinaten\nconst CONSTELLATIONS = {\n    // Waage (Libra)\n    libra: [\n        { x: 21, y: 5 },\n        { x: 13, y: 13 },\n        { x: 5, y: 21 },\n        { x: 13, y: 29 },\n        { x: 21, y: 29 },\n        { x: 29, y: 29 },\n        { x: 37, y: 21 },\n        { x: 29, y: 13 },\n        { x: 21, y: 21 },\n        { x: 29, y: 37 }\n    ],\n    // Orion (Der Jäger)\n    orion: [\n        { x: 21, y: 5 },\n        { x: 13, y: 13 },\n        { x: 5, y: 21 },\n        { x: 13, y: 29 },\n        { x: 21, y: 29 },\n        { x: 29, y: 29 },\n        { x: 37, y: 21 },\n        { x: 29, y: 13 },\n        { x: 21, y: 37 },\n        { x: 21, y: 45 }\n    ],\n    // Kleiner Wagen (Ursa Minor)\n    ursa_minor: [\n        { x: 15, y: 15 },\n        { x: 13, y: 25 },\n        { x: 21, y: 29 },\n        { x: 25, y: 35 },\n        { x: 35, y: 39 },\n        { x: 45, y: 45 },\n        { x: 39, y: 25 }\n    ],\n    // Kassiopeia (W-Form)\n    cassiopeia: [\n        { x: 7, y: 10 },\n        { x: 13, y: 25 },\n        { x: 21, y: 10 },\n        { x: 33, y: 25 },\n        { x: 43, y: 10 }\n    ],\n    // Schwan (Cygnus/Nördliches Kreuz)\n    cygnus: [\n        { x: 25, y: 5 },\n        { x: 25, y: 13 },\n        { x: 25, y: 21 },\n        { x: 25, y: 29 },\n        { x: 25, y: 45 },\n        { x: 5, y: 21 },\n        { x: 13, y: 21 },\n        { x: 37, y: 21 },\n        { x: 45, y: 21 }\n    ],\n    // Großer Wagen (Ursa Major)\n    ursa_major: [\n        { x: 5, y: 5 },\n        { x: 13, y: 15 },\n        { x: 21, y: 20 },\n        { x: 30, y: 25 },\n        { x: 35, y: 35 },\n        { x: 40, y: 45 }\n    ],\n    // Löwe (Leo)\n    leo: [\n        { x: 10, y: 10 },\n        { x: 15, y: 15 },\n        { x: 25, y: 20 },\n        { x: 35, y: 25 },\n        { x: 45, y: 30 },\n        { x: 35, y: 35 },\n        { x: 25, y: 30 },\n        { x: 15, y: 25 },\n        { x: 10, y: 10 }\n    ],\n    // Drache (Draco)\n    draco: [\n        { x: 5, y: 45 },\n        { x: 10, y: 35 },\n        { x: 15, y: 30 },\n        { x: 20, y: 25 },\n        { x: 25, y: 20 },\n        { x: 30, y: 15 },\n        { x: 35, y: 10 },\n        { x: 30, y: 5 },\n        { x: 20, y: 5 },\n        { x: 10, y: 10 },\n        { x: 5, y: 15 }\n    ],\n    // Zwillinge (Gemini)\n    gemini: [\n        { x: 10, y: 10 },\n        { x: 15, y: 15 },\n        { x: 20, y: 20 },\n        { x: 25, y: 25 },\n        { x: 30, y: 30 },\n        { x: 35, y: 25 },\n        { x: 40, y: 20 },\n        { x: 35, y: 15 },\n        { x: 30, y: 10 }\n    ],\n    // Kreuz des Südens (Southern Cross)\n    southern_cross: [\n        { x: 25, y: 5 },\n        { x: 25, y: 25 },\n        { x: 15, y: 15 },\n        { x: 35, y: 15 }\n    ],\n    // Pegasus (Quadrat)\n    pegasus: [\n        { x: 10, y: 10 },\n        { x: 10, y: 40 },\n        { x: 40, y: 40 },\n        { x: 40, y: 10 },\n        { x: 10, y: 10 }\n    ],\n    // Andromeda\n    andromeda: [\n        { x: 5, y: 10 },\n        { x: 15, y: 15 },\n        { x: 25, y: 17 },\n        { x: 35, y: 15 },\n        { x: 40, y: 5 },\n        { x: 42, y: 12 },\n        { x: 45, y: 20 }\n    ],\n    // Schütze (Sagittarius)\n    sagittarius: [\n        { x: 10, y: 40 },\n        { x: 20, y: 30 },\n        { x: 30, y: 25 },\n        { x: 40, y: 27 },\n        { x: 45, y: 35 },\n        { x: 35, y: 20 },\n        { x: 25, y: 15 },\n        { x: 15, y: 15 }\n    ],\n    // Skorpion (Scorpius)\n    scorpius: [\n        { x: 10, y: 35 },\n        { x: 15, y: 30 },\n        { x: 20, y: 25 },\n        { x: 25, y: 20 },\n        { x: 30, y: 15 },\n        { x: 35, y: 10 },\n        { x: 35, y: 15 },\n        { x: 40, y: 15 },\n        { x: 45, y: 10 },\n        { x: 45, y: 5 }\n    ],\n    // Krebs (Cancer)\n        cancer: [\n            { x: 25, y: 5 },\n            { x: 20, y: 15 },\n            { x: 30, y: 15 },\n            { x: 15, y: 25 },\n            { x: 35, y: 25 },\n            { x: 25, y: 35 }\n        ],     // Fische (Pisces)\n    pisces: [\n        { x: 5, y: 15 },\n        { x: 10, y: 10 },\n        { x: 15, y: 15 },\n        { x: 20, y: 20 },\n        { x: 25, y: 25 },\n        { x: 30, y: 30 },\n        { x: 35, y: 35 },\n        { x: 40, y: 30 },\n        { x: 45, y: 25 },\n        { x: 40, y: 20 },\n        { x: 35, y: 15 }\n    ],\n    // Adler (Aquila)\n    aquila: [\n        { x: 25, y: 5 },\n        { x: 20, y: 15 },\n        { x: 15, y: 25 },\n        { x: 25, y: 20 },\n        { x: 35, y: 25 },\n        { x: 30, y: 15 },\n        { x: 25, y: 5 }\n    ],\n    // Herkules\n    hercules: [\n        { x: 10, y: 10 },\n        { x: 15, y: 25 },\n        { x: 25, y: 30 },\n        { x: 35, y: 25 },\n        { x: 40, y: 10 },\n        { x: 30, y: 15 },\n        { x: 20, y: 15 },\n        { x: 10, y: 10 }\n    ],\n    myrtana: [\n        { x: 40, y: 20 },\n        { x: 36, y: 32 },\n        { x: 25, y: 20 },\n        { x: 10, y: 35 },\n        { x: 18, y: 10 },\n    ]\n};\n// Funktion zur Erstellung von Sternbild-Knoten für beide Algorithmen\nfunction createConstellationNodes(selectedType, count) {\n    const baseNodes = CONSTELLATIONS[selectedType];\n    if (!baseNodes) return [];     \n    let nodes = [];     \n    if (count === baseNodes.length || count <= 0) {\n        // Wenn die Anzahl gleich ist oder keine Anzahl angegeben wurde, \n        // verwenden wir alle Punkte des Sternbilds\n        nodes = baseNodes.map((pt, i) => ({ ...pt, id: i }));\n    } else {\n        // Interpolation für andere Anzahlen\n        const totalSegments = baseNodes.length - 1;\n        for (let i = 0; i < count; i++) {\n            const t = i / (count - 1);\n            const segment = Math.min(Math.floor(t * totalSegments), totalSegments - 1);\n            const localT = (t * totalSegments) - segment;\n            const p0 = baseNodes[segment];\n            const p1 = baseNodes[segment + 1];\n            const x = p0.x + (p1.x - p0.x) * localT;\n            const y = p0.y + (p1.y - p0.y) * localT;\n            nodes.push({ x: Math.round(x), y: Math.round(y), id: i });\n        }\n    }       \n    return nodes;\n}\n// ================ CHRISTOFIDES ALGORITHMUS ================  \n// Christofides Animation Klasse\nclass ChristofidesAnimation {\n    constructor(canvas, numNodes = 4, startNode = 0) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.scale(canvas.width / 50, canvas.height / 50);\n        this.numNodes = numNodes;\n        this.startNode = startNode;\n        this.nodes = [];\n        this.mstEdges = [];\n        this.oddNodes = [];\n        this.matchingEdges = [];\n        this.eulerianCircuit = [];\n        this.tspPath = [];\n        this.phase = 'mst';\n        this.lastPhase = null;  \n        this.currentMSTIndex = 0;\n        this.currentMatchingIndex = 0;\n        this.currentEulerIndex = 1; \n        this.currentTSPIndex = 1;\n        this.drawnEdges = new Map();\n        this.init();\n        this.drawNodes(true);\n    }\n    // Zeichnet ein Koordinatensystem als Raster\n    drawCoordinateSystem() {\n        this.ctx.strokeStyle = getGridColor();\n        this.ctx.lineWidth = 0.1;\n        for (let x = 0; x <= 50; x += 5) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, 0);\n            this.ctx.lineTo(x, 50);\n            this.ctx.stroke();\n        }\n        for (let y = 0; y <= 50; y += 5) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, y);\n            this.ctx.lineTo(50, y);\n            this.ctx.stroke();\n        }\n    }       \n    init() {\n        this.generateNodes();\n        this.computeMST();\n        this.findOddNodes();\n        this.computeMatching();\n        this.computeEulerianCircuit();\n        this.computeTSPPath();\n    }     \n    generateNodes() {\n        for (let i = 0; i < this.numNodes; i++) {\n            this.nodes.push({\n                x: Math.floor(Math.random() * (40 - 5 + 1)) + 5,\n                y: Math.floor(Math.random() * (40 - 5 + 1)) + 5,\n                id: i\n            });\n        }\n    }    \n    distance(a, b) {\n        return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n    }      \n      computeMST() {\n        const inTree = new Set([this.startNode]);\n        this.mstEdges = [];\n        while (inTree.size < this.numNodes) {\n            let minEdge = null;\n            for (const node of inTree) {\n                for (let i = 0; i < this.numNodes; i++) {\n                    if (!inTree.has(i)) {\n                        const distance = this.distance(this.nodes[node], this.nodes[i]);\n                        if (!minEdge || distance < minEdge.distance) {\n                            minEdge = { from: node, to: i, distance };\n                        }\n                    }\n                }\n            }\n            if (minEdge) {\n                this.mstEdges.push(minEdge);\n                inTree.add(minEdge.to);\n            }\n        }\n    }   \n    findOddNodes() {\n        const degrees = new Array(this.numNodes).fill(0);\n        for (const edge of this.mstEdges) {\n            degrees[edge.from]++;\n            degrees[edge.to]++;\n        }\n        this.oddNodes = degrees.reduce((acc, d, i) => (d % 2 ? [...acc, i] : acc), []);\n    }  \n    computeMatching() {\n        const matchings = this.generateAllMatchings([...this.oddNodes]);\n        let minMatching = null;\n        let minDistance = Infinity;\n        for (const matching of matchings) {\n            const total = matching.reduce((sum, [a, b]) =>\n                sum + this.distance(this.nodes[a], this.nodes[b]), 0);\n            if (total < minDistance) {\n                minDistance = total;\n                minMatching = matching;\n            }\n        }\n        this.matchingEdges = minMatching.map(([a, b]) => ({\n            from: a,\n            to: b,\n            distance: this.distance(this.nodes[a], this.nodes[b])\n        }));\n    }    \n    generateAllMatchings(nodes) {\n        if (nodes.length === 0) return [[]];\n        const [first, ...rest] = nodes;\n        return rest.flatMap((node, i) => {\n            const newRest = rest.filter((_, j) => j !== i);\n            return this.generateAllMatchings(newRest).map(match => [[first, node], ...match]);\n        });\n    }   \n    computeEulerianCircuit() {\n        const adj = new Map();\n        const addEdge = (from, to) => {\n            if (!adj.has(from)) adj.set(from, []);\n            adj.get(from).push(to);\n        };\n        [...this.mstEdges, ...this.matchingEdges].forEach(edge => {\n            addEdge(edge.from, edge.to);\n            addEdge(edge.to, edge.from);\n        });\n        const stack = [this.startNode];\n        const circuit = [];\n        while (stack.length) {\n            let current = stack[stack.length - 1];\n            if (adj.get(current)?.length) {\n                const next = adj.get(current).pop();\n                stack.push(next);\n            } else {\n                circuit.push(stack.pop());\n            }\n        }\n        this.eulerianCircuit = circuit.reverse();\n    }  \n    computeTSPPath() {\n        const visited = new Set();\n        this.tspPath = [];\n        for (const node of this.eulerianCircuit) {\n            if (!visited.has(node)) {\n                visited.add(node);\n                this.tspPath.push(node);\n            }\n        }\n        this.tspPath.push(this.tspPath[0]);\n    } \n    drawNodes(showCoordinateSystem = false) {\n        if (showCoordinateSystem) {\n            this.drawCoordinateSystem();\n        }\n        this.nodes.forEach(node => {\n            this.ctx.beginPath();\n            this.ctx.arc(node.x, node.y, 0.5, 0, Math.PI * 2);\n            this.ctx.fillStyle = getPointColor();\n            this.ctx.fill();\n            this.ctx.font = \"1.5px sans-serif\";\n            this.ctx.fillStyle = getTextColor();\n            this.ctx.textAlign = \"center\";\n            const label = `P${node.id}`;\n            this.ctx.fillText(label, node.x, node.y - 1.2);\n        });\n    }\n    drawEdges(edges, color) {\n        edges.forEach(edge => {\n            const key = [Math.min(edge.from, edge.to), Math.max(edge.from, edge.to)].join('-');\n            let useColor = color;\n            if (this.drawnEdges.has(key) && this.drawnEdges.get(key) === color) {\n                useColor = this.getComplementaryColor(color);\n            }\n            this.ctx.strokeStyle = useColor;\n            this.ctx.lineWidth = 0.3;\n            const from = this.nodes[edge.from];\n            const to = this.nodes[edge.to];\n            this.ctx.beginPath();\n            this.ctx.moveTo(from.x, from.y);\n            this.ctx.lineTo(to.x, to.y);\n            this.ctx.stroke();\n            this.drawnEdges.set(key, useColor);\n        });\n    }   \n    getComplementaryColor(color) {\n        const comp = {\n            \"blue\": \"orange\",\n            \"green\": \"magenta\",\n            \"purple\": \"yellow\",\n            \"orange\": \"blue\"\n        };\n        return comp[color] || \"black\";\n    } \n    highlightOddNodes() {\n        this.oddNodes.forEach(id => {\n            const node = this.nodes[id];\n            this.ctx.beginPath();\n            this.ctx.arc(node.x, node.y, 0.8, 0, Math.PI * 2);\n            this.ctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n            this.ctx.fill();\n        });\n    }  \n    drawEulerEdge(index) {\n        if (index <= 0 || index >= this.eulerianCircuit.length) return;\n        const from = this.nodes[this.eulerianCircuit[index - 1]];\n        const to = this.nodes[this.eulerianCircuit[index]];\n        this.drawEdges([{ from: this.eulerianCircuit[index - 1], to: this.eulerianCircuit[index] }], 'purple');\n    }   \n    drawTSPPath(index) {\n        if (index <= 0 || index >= this.tspPath.length) return;\n        this.ctx.strokeStyle = 'orange';\n        this.ctx.lineWidth = 0.5;\n        this.ctx.beginPath();\n        const startNode = this.nodes[this.tspPath[0]];\n        this.ctx.moveTo(startNode.x, startNode.y);\n        for (let i = 1; i <= index; i++) {\n            const node = this.nodes[this.tspPath[i]];\n            this.ctx.lineTo(node.x, node.y);\n        }\n        this.ctx.stroke();\n    }   \n    nextStep() {\n        if (this.phase === 'mst') {\n            const edge = this.mstEdges[this.currentMSTIndex];\n            if (edge) {\n                this.drawEdges([edge], 'blue');\n                this.currentMSTIndex++;\n            }\n            if (this.currentMSTIndex >= this.mstEdges.length) {\n                this.phase = 'odd';\n            }\n        }\n        else if (this.phase === 'odd') {\n            this.highlightOddNodes();\n            this.ctx.clearRect(0, 0, 100, 50);\n            this.drawnEdges.clear();\n            this.drawNodes(false);\n            this.highlightOddNodes();\n            this.phase = 'matching';\n        }\n        else if (this.phase === 'matching') {\n            const edge = this.matchingEdges[this.currentMatchingIndex];\n            if (edge) {\n                this.drawEdges([edge], 'green');\n                this.currentMatchingIndex++;\n            }\n            if (this.currentMatchingIndex >= this.matchingEdges.length) {\n                this.phase = 'euler';\n                this.currentEulerIndex = 1;\n            }\n        }\n        else if (this.phase === 'euler') {\n            this.drawEulerEdge(this.currentEulerIndex);\n            this.currentEulerIndex++;\n            if (this.currentEulerIndex >= this.eulerianCircuit.length) {\n                this.phase = 'eulerComplete';\n            }\n        }\n        else if (this.phase === 'eulerComplete') {\n            this.ctx.clearRect(0, 0, 100, 50);\n            this.drawnEdges.clear();\n            this.drawNodes(false);\n            this.highlightOddNodes();\n            this.phase = 'tsp';\n            this.currentTSPIndex = 1;\n        }\n        else if (this.phase === 'tsp') {\n            this.drawTSPPath(this.currentTSPIndex);\n            this.currentTSPIndex++;\n            if (this.currentTSPIndex >= this.tspPath.length) {\n                // Das Koordinatensystem neu zeichnen, wenn die Animation fertig ist\n                this.ctx.clearRect(0, 0, 100, 50);\n                this.drawNodes(true); // true als Parameter, um das Koordinatensystem zu zeichnen\n                this.drawTSPPath(this.tspPath.length - 1); // Finalen Pfad zeichnen\n                stopAutoAnimation();\n            }\n        }\n        updateInfoPanel();\n    }\n} \n// Globale Variablen für Christofides\nlet animation = new ChristofidesAnimation(document.getElementById('canvas'), 4, 0);\nlet autoIntervalId = null; \n// Christofides Funktionen\nfunction updateInfoPanel() {\n    const dataOutput = document.getElementById('dataOutput'); \n    // Aktuelle Phase\n    let html = \"<strong>Aktuelle Phase:</strong> \";\n    const phases = {\n        'mst': 'Minimum Spanning Tree (MST)',\n        'odd': 'Identifikation ungerader Knoten',\n        'matching': 'Minimales perfektes Matching',\n        'euler': 'Euler-Kreis im Multigraphen',\n        'eulerComplete': 'Euler-Kreis komplett',\n        'tsp': 'Hamilton-Kreis durch Shortcutting'\n    };\n    html += phases[animation.phase] || animation.phase.toUpperCase();\n    html += \"<hr>\";     \n    // Punkte\n    html += \"<strong>Generierte Punkte:</strong><br>\";\n    html += animation.nodes.map(node => \"P\" + node.id + \": (\" + node.x + \", \" + node.y + \")\").join(\"<br>\") + \"<hr>\"; \n    // MST Kanten\n    html += \"<strong>MST Kanten:</strong><br>\";\n    if (animation.currentMSTIndex === 0) {\n        html += \"Noch keine MST-Kanten gezeichnet\";\n    } else {\n        html += animation.mstEdges.slice(0, animation.currentMSTIndex)\n            .map(e => \"Von \" + e.from + \" nach \" + e.to + \" (Distanz: \" + e.distance.toFixed(2) + \")\")\n            .join(\"<br>\");\n    }\n    html += \"<hr>\";   \n    // Ungerade Knoten\n    html += \"<strong>Ungerade Knoten:</strong><br>\";\n    if (animation.phase === 'mst' && animation.currentMSTIndex < animation.mstEdges.length) {\n        html += \"Wird nach Fertigstellung des MST berechnet\";\n    } else {\n        html += animation.oddNodes.join(\", \");\n    }\n    html += \"<hr>\"; \n    // Matching Kanten\n    html += \"<strong>Matching Kanten:</strong><br>\";\n    if (animation.phase === 'mst' || animation.phase === 'odd') {\n        html += \"Wird nach Identifikation ungerader Knoten berechnet\";\n    } else if (animation.currentMatchingIndex === 0) {\n        html += \"Noch keine Matching-Kanten gezeichnet\";\n    } else {\n        html += animation.matchingEdges.slice(0, animation.currentMatchingIndex)\n            .map(e => \"Von \" + e.from + \" nach \" + e.to + \" (Distanz: \" + e.distance.toFixed(2) + \")\")\n            .join(\"<br>\");\n    }\n    html += \"<hr>\";  \n    // Eulerischer Pfad\n    html += \"<strong>Eulerischer Pfad:</strong><br>\";\n    if (animation.phase === 'mst' || animation.phase === 'odd' || animation.phase === 'matching') {\n        html += \"Wird nach Abschluss des Matchings berechnet\";\n    } else if (animation.currentEulerIndex <= 1 && animation.phase === 'euler') {\n        html += animation.eulerianCircuit[0];\n    } else {\n        html += animation.eulerianCircuit.slice(0, \n            animation.phase === 'eulerComplete' || animation.phase === 'tsp' ? \n            animation.eulerianCircuit.length : animation.currentEulerIndex).join(\" → \");\n    }\n    html += \"<hr>\"; \n    // TSP Pfad\n    html += \"<strong>TSP Pfad:</strong><br>\";\n    if (animation.phase !== 'tsp') {\n        html += \"Wird im letzten Schritt berechnet\";\n    } else if (animation.currentTSPIndex <= 1) {\n        html += animation.tspPath[0];\n    } else {\n        let path = animation.tspPath.slice(0, animation.currentTSPIndex).join(\" → \");\n        if (animation.currentTSPIndex >= animation.tspPath.length) {\n            let totalLength = 0;\n            for (let i = 1; i < animation.tspPath.length; i++) {\n                totalLength += animation.distance(animation.nodes[animation.tspPath[i-1]], animation.nodes[animation.tspPath[i]]);\n            }\n            path += \"<br><br><span style='font-size: 1.2em;'><strong>Gesamtlänge: \" + totalLength.toFixed(2) + \"</strong></span>\";\n        }\n        html += path;\n    }\n    dataOutput.innerHTML = html;\n}\nfunction nextStep() {\n    if (!animation) return;\n    animation.nextStep();\n}\nfunction startAutoAnimation() {\n    if (autoIntervalId) return;\n    const slider = document.getElementById('speedSlider');\n    const percent = parseInt(slider.value);\n    const speed = 1000 * (100 / percent);\n    autoIntervalId = setInterval(() => {\n        animation.nextStep();\n    }, speed);\n}\nfunction toggleAutoAnimation() {\n    if (autoIntervalId) {\n        stopAutoAnimation();\n    } else {\n        startAutoAnimation();\n    }\n}\nfunction stopAutoAnimation() {\n    if (autoIntervalId) {\n        clearInterval(autoIntervalId);\n        autoIntervalId = null;\n    }\n}\nfunction resetAnimation() {\n    stopAutoAnimation();\n    if (animation) {\n        animation.ctx.clearRect(0, 0, 100, 50);\n        animation.phase = 'mst';\n        animation.lastPhase = null;\n        animation.currentMSTIndex = 0;\n        animation.currentMatchingIndex = 0;\n        animation.currentEulerIndex = 1;\n        animation.currentTSPIndex = 1;\n        animation.drawnEdges.clear();\n        animation.drawNodes(true);\n        updateInfoPanel();\n    }\n}\nfunction updateNumPoints() {\n    stopAutoAnimation();\n    const numPoints = parseInt(document.getElementById('numPoints').value);\n    const startPoint = parseInt(document.getElementById('startPointChristofides').value);\n    animation = new ChristofidesAnimation(document.getElementById('canvas'), numPoints, startPoint);\n    animation.ctx.clearRect(0, 0, 100, 50);\n    animation.drawNodes(true);\n    updateInfoPanel();\n}\nfunction updateStartPoint() {\n    stopAutoAnimation();\n    const startPoint = parseInt(document.getElementById('startPointChristofides').value);       \n    // Prüfen ob der Startpunkt gültig ist\n    if (isNaN(startPoint) || startPoint < 0 || startPoint >= animation.nodes.length) {\n        alert(`Bitte geben Sie einen gültigen Startpunkt zwischen 0 und ${animation.nodes.length - 1} ein.`);\n        return;\n    }      \n    // Speichern der aktuellen Knoten\n    const currentNodes = JSON.parse(JSON.stringify(animation.nodes));     \n    // Erstellen einer neuen Animation mit dem neuen Startpunkt aber den bestehenden Knoten\n    animation = new ChristofidesAnimation(document.getElementById('canvas'), animation.numNodes, startPoint);\n    animation.nodes = currentNodes; // Bestehende Knoten übernehmen     \n    // Berechnen der neuen Pfade mit dem aktuellen Startpunkt\n    animation.mstEdges = [];\n    animation.oddNodes = [];\n    animation.matchingEdges = [];\n    animation.eulerianCircuit = [];\n    animation.tspPath = [];\n    animation.drawnEdges.clear();      \n    // Neuberechnung basierend auf den vorhandenen Knoten\n    animation.computeMST();\n    animation.findOddNodes();\n    animation.computeMatching();\n    animation.computeEulerianCircuit();\n    animation.computeTSPPath();       \n    animation.ctx.clearRect(0, 0, 100, 50);\n    animation.drawNodes(true);\n    updateInfoPanel();\n}\nfunction toggleConstellation(selectedType) {\n    stopAutoAnimation();      \n    if (!selectedType) return; // Wenn keine Auswahl getroffen wurde        \n    animation = new ChristofidesAnimation(document.getElementById('canvas'), 0); // 0, wird überschrieben       \n    // Nutze die gemeinsame Funktion, um die Sternbildknoten zu erstellen\n    // Mit 0 als count werden alle Originalpunkte des Sternbildes verwendet\n    animation.nodes = createConstellationNodes(selectedType, 0);\n    animation.numNodes = animation.nodes.length;        \n    animation.mstEdges = [];\n    animation.oddNodes = [];\n    animation.matchingEdges = [];\n    animation.eulerianCircuit = [];\n    animation.tspPath = [];\n    animation.drawnEdges.clear();       \n    // Neuberechnung\n    animation.computeMST();\n    animation.findOddNodes();\n    animation.computeMatching();\n    animation.computeEulerianCircuit();\n    animation.computeTSPPath();       \n    animation.ctx.clearRect(0, 0, 100, 50);\n    animation.drawNodes(true);\n    updateInfoPanel();       \n    // Aktualisiere das Zahlenfeld mit der tatsächlichen Punktanzahl\n    document.getElementById('numPoints').value = animation.nodes.length;\n}\nfunction downloadGraph() {\n    const canvas = document.getElementById('canvas');\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = canvas.width;\n    tmpCanvas.height = canvas.height;\n    const tmpCtx = tmpCanvas.getContext('2d');\n    tmpCtx.fillStyle = 'white';\n    tmpCtx.fillRect(0, 0, tmpCanvas.width, tmpCanvas.height);\n    tmpCtx.drawImage(canvas, 0, 0);\n    const link = document.createElement('a');\n    link.download = 'graph.png';\n    link.href = tmpCanvas.toDataURL('image/png');\n    link.click();\n}\nfunction drawGraphData() {\n    const dataCanvas = document.getElementById('dataCanvas');\n    if (dataCanvas) {\n        const ctx = dataCanvas.getContext('2d');\n        ctx.clearRect(0, 0, dataCanvas.width, dataCanvas.height);\n        ctx.fillStyle = 'white';\n        ctx.fillRect(0, 0, dataCanvas.width, dataCanvas.height);\n        ctx.fillStyle = \"black\";\n        ctx.font = \"14px sans-serif\";\n        const lineHeight = 18;\n        let y = lineHeight;\n        ctx.fillText(\"Graph Daten:\", 10, y);\n        y += lineHeight * 1.5;\n        ctx.fillText(\"Knoten:\", 10, y);\n        y += lineHeight;\n        animation.nodes.forEach(node => {\n            ctx.fillText(`P${node.id}: (${node.x}, ${node.y})`, 10, y);\n            y += lineHeight;\n        });\n    } else {  \n        const canvas = document.getElementById('canvas');\n        const ctx = canvas.getContext('2d');\n        ctx.save();\n        const textBoxX = canvas.width - 250;\n        const textBoxY = 0;\n        const textBoxWidth = 250;\n        const textBoxHeight = canvas.height;\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n        ctx.fillRect(textBoxX, textBoxY, textBoxWidth, textBoxHeight);\n        ctx.fillStyle = \"black\";\n        ctx.font = \"14px sans-serif\";\n        const lineHeight = 18;\n        let y = textBoxY + lineHeight;\n        ctx.fillText(\"Graph Daten:\", textBoxX + 10, y);\n        y += lineHeight * 1.5;\n        ctx.fillText(\"Knoten:\", textBoxX + 10, y);\n        y += lineHeight;\n        animation.nodes.forEach(node => {\n            ctx.fillText(`P${node.id}: (${node.x}, ${node.y})`, textBoxX + 10, y);\n            y += lineHeight;\n        });\n        ctx.restore();\n    }\n}\nfunction importNNPoints() {\n    if (typeof nnAnimation !== 'undefined' && nnAnimation && nnAnimation.nodes) {\n        stopAutoAnimation();\n        const numPoints = nnAnimation.nodes.length;\n        const startPoint = parseInt(document.getElementById('startPointChristofides').value);\n        animation = new ChristofidesAnimation(document.getElementById('canvas'), numPoints, startPoint);\n        animation.nodes = JSON.parse(JSON.stringify(nnAnimation.nodes));\n        animation.mstEdges = [];\n        animation.oddNodes = [];\n        animation.matchingEdges = [];\n        animation.eulerianCircuit = [];\n        animation.tspPath = [];\n        animation.phase = 'mst';\n        animation.lastPhase = null;\n        animation.currentMSTIndex = 0;\n        animation.currentMatchingIndex = 0;\n        animation.currentEulerIndex = 1;\n        animation.currentTSPIndex = 1;\n        animation.drawnEdges.clear();\n        animation.computeMST();\n        animation.findOddNodes();\n        animation.computeMatching();\n        animation.computeEulerianCircuit();\n        animation.computeTSPPath();\n        animation.ctx.clearRect(0, 0, 100, 50);\n        animation.drawNodes(true);\n        updateInfoPanel();\n    } else {\n        console.log(\"NN-Animation nicht gefunden oder keine Punkte verfügbar\");\n    }\n}\nfunction importBFPoints() {\n    if (typeof bfAnimation !== 'undefined' && bfAnimation && bfAnimation.nodes) {\n        stopAutoAnimation();\n        const numPoints = bfAnimation.nodes.length;\n        const startPoint = parseInt(document.getElementById('startPointChristofides').value);\n        animation = new ChristofidesAnimation(document.getElementById('canvas'), numPoints, startPoint);\n        animation.nodes = JSON.parse(JSON.stringify(bfAnimation.nodes));\n        animation.mstEdges = [];\n        animation.oddNodes = [];\n        animation.matchingEdges = [];\n        animation.eulerianCircuit = [];\n        animation.tspPath = [];\n        animation.phase = 'mst';\n        animation.lastPhase = null;\n        animation.currentMSTIndex = 0;\n        animation.currentMatchingIndex = 0;\n        animation.currentEulerIndex = 1;\n        animation.currentTSPIndex = 1;\n        animation.drawnEdges.clear();\n        animation.computeMST();\n        animation.findOddNodes();\n        animation.computeMatching();\n        animation.computeEulerianCircuit();\n        animation.computeTSPPath();\n        animation.ctx.clearRect(0, 0, 100, 50);\n        animation.drawNodes(true);\n        updateInfoPanel();\n    } else {\n        console.log(\"BF-Animation nicht gefunden oder keine Punkte verfügbar\");\n    }\n}\n// Event-Listener\ndocument.getElementById('speedSlider').addEventListener('input', function() {\n    if (autoIntervalId) {\n        clearInterval(autoIntervalId);\n        const percent = parseInt(this.value);\n        const speed = 1000 * (100 / percent);\n        autoIntervalId = setInterval(() => {\n            animation.nextStep();\n        }, speed);\n    }\n});\n// ================ NEAREST NEIGHBOR ALGORITHMUS ================ \n// Nearest Neighbor Animation Klasse\nclass NearestNeighborAnimation {\n    constructor(canvas, numNodes = 4, startNode = 0) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.scale(canvas.width / 50, canvas.height / 50);\n        this.numNodes = numNodes;\n        this.startNode = startNode;\n        this.nodes = [];\n        this.nnPath = [];\n        this.selectionSteps = []; \n        this.currentPathIndex = 0;    \n        this.init();\n        this.drawNodes(true);\n    }    \n    drawCoordinateSystem() {\n        this.ctx.strokeStyle = getGridColor();\n        this.ctx.lineWidth = 0.1;   \n        for (let x = 0; x <= 100; x += 10) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, 0);\n            this.ctx.lineTo(x, 50);\n            this.ctx.stroke();\n        }  \n        for (let y = 0; y <= 50; y += 5) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, y);\n            this.ctx.lineTo(100, y);\n            this.ctx.stroke();\n        }\n    }     \n    init() {\n        this.generateNodes();\n        this.computeNearestNeighborPath();\n    }      \n    generateNodes() {\n        for (let i = 0; i < this.numNodes; i++) {\n            this.nodes.push({\n                x: Math.floor(Math.random() * (40 - 5 + 1)) + 5,\n                y: Math.floor(Math.random() * (40 - 5 + 1)) + 5,\n                id: i\n            });\n        }\n    }     \n    distance(a, b) {\n        return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n    }       \n    computeNearestNeighborPath() {\n        const visited = new Set([this.startNode]);\n        this.nnPath = [this.startNode]; \n        this.selectionSteps = [];\n        let current = this.startNode;\n        while (visited.size < this.numNodes) {\n            let nearest = null;\n            let minDistance = Infinity;\n            const currentStep = {\n                current: current,\n                candidates: []\n            };\n            for (let i = 0; i < this.numNodes; i++) {\n                if (!visited.has(i)) {\n                    const dist = this.distance(this.nodes[current], this.nodes[i]);\n                    currentStep.candidates.push({\n                        node: i,\n                        distance: dist,\n                        isNearest: false\n                    });\n                    if (dist < minDistance) {\n                        minDistance = dist;\n                        nearest = i;\n                    }\n                }\n            }\n            const nearestCandidate = currentStep.candidates.find(c => c.node === nearest);\n            if (nearestCandidate) {\n                nearestCandidate.isNearest = true;\n            }\n            this.selectionSteps.push(currentStep);\n            current = nearest;\n            visited.add(current);\n            this.nnPath.push(current);\n        } \n        this.nnPath.push(this.startNode);\n    }        \n    drawNodes(showCoordinateSystem = false) {\n        if (showCoordinateSystem) {\n            this.drawCoordinateSystem();\n        }   \n        this.nodes.forEach(node => {\n            this.ctx.beginPath();\n            this.ctx.arc(node.x, node.y, 0.5, 0, Math.PI * 2);\n            this.ctx.fillStyle = getPointColor();\n            this.ctx.fill();\n            this.ctx.font = \"1.5px sans-serif\";\n            this.ctx.fillStyle = getTextColor();\n            this.ctx.textAlign = \"center\";\n            const label = `P${node.id}`;\n            this.ctx.fillText(label, node.x, node.y - 1.2);\n        });\n    }     \n    drawPath(steps) {\n        if (steps <= 0) return;   \n        const pathSegments = Math.min(steps, this.nnPath.length - 1);\n        this.ctx.strokeStyle = 'red';\n        this.ctx.lineWidth = 0.5;\n        this.ctx.beginPath();  \n        const startNode = this.nodes[this.nnPath[0]];\n        this.ctx.moveTo(startNode.x, startNode.y);  \n        for (let i = 1; i <= pathSegments; i++) {\n            const node = this.nodes[this.nnPath[i]];\n            this.ctx.lineTo(node.x, node.y);\n        }  \n        this.ctx.stroke();\n    }     \n    drawSelectionStep(stepIndex) {\n        if (stepIndex < 0 || stepIndex >= this.selectionSteps.length) return;\n        const step = this.selectionSteps[stepIndex];\n        const currentNode = this.nodes[step.current];\n        this.ctx.beginPath();\n        this.ctx.arc(currentNode.x, currentNode.y, 0.8, 0, Math.PI * 2);\n        this.ctx.fillStyle = 'rgba(0, 128, 255, 0.6)';\n        this.ctx.fill();\n        step.candidates.forEach(candidate => {\n            const candidateNode = this.nodes[candidate.node];\n            this.ctx.strokeStyle = candidate.isNearest ? 'green' : 'blue';\n            this.ctx.lineWidth = candidate.isNearest ? 0.3 : 0.1;\n            this.ctx.setLineDash(candidate.isNearest ? [] : [0.2, 0.2]);\n            this.ctx.beginPath();\n            this.ctx.moveTo(currentNode.x, currentNode.y);\n            this.ctx.lineTo(candidateNode.x, candidateNode.y);\n            this.ctx.stroke();\n            this.ctx.setLineDash([]);\n            if (candidate.isNearest) {\n                this.ctx.beginPath();\n                this.ctx.arc(candidateNode.x, candidateNode.y, 0.8, 0, Math.PI * 2);\n                this.ctx.fillStyle = 'rgba(0, 255, 0, 0.6)';\n                this.ctx.fill();\n            }\n        });\n    }      \n    nextStep() {\n        this.ctx.clearRect(0, 0, 100, 50);\n        this.drawNodes(true);\n        if (this.currentPathIndex < this.selectionSteps.length) {\n            this.drawSelectionStep(this.currentPathIndex);\n            this.drawPath(this.currentPathIndex);\n            this.currentPathIndex++;\n        } else if (this.currentPathIndex === this.selectionSteps.length) {\n            this.drawPath(this.nnPath.length - 1);\n            this.currentPathIndex++;\n        } else {\n            nnStopAutoAnimation();\n        }\n    }   \n    importChristofidesPoints() {\n        if (typeof animation !== 'undefined' && animation && animation.nodes) {\n            this.nodes = JSON.parse(JSON.stringify(animation.nodes));\n            this.numNodes = this.nodes.length;\n            this.computeNearestNeighborPath();\n            this.ctx.clearRect(0, 0, 100, 50);\n            this.currentPathIndex = 0;\n            this.drawNodes(true);\n        }\n    }\n    importBFPoints() {\n        if (typeof bfAnimation !== 'undefined' && bfAnimation && bfAnimation.nodes) {\n            this.nodes = JSON.parse(JSON.stringify(bfAnimation.nodes));\n            this.numNodes = this.nodes.length;\n            this.computeNearestNeighborPath();\n            this.ctx.clearRect(0, 0, 100, 50);\n            this.currentPathIndex = 0;\n            this.drawNodes(true);\n        }\n    }\n} \n// Globale Variablen für Nearest Neighbor\nlet nnAnimation = null;\nlet nnAutoIntervalId = null;   \n// Nearest Neighbor Funktionen\nfunction nnUpdateInfoPanel() {\n    const dataOutput = document.getElementById('nnDataOutput');\n    const stepDropdown = document.getElementById('nnStepDropdown');\n    const stepDetails = document.getElementById('nnStepDetails');\n    const fullTable = document.getElementById('nnFullTable');       \n    if (!dataOutput || !stepDropdown || !nnAnimation) return;        \n    let html = \"<strong>Algorithmus:</strong> Nearest Neighbor<br>\";\n    html += \"<hr>\";\n    html += \"<strong>Punkte:</strong><br>\";\n    html += nnAnimation.nodes.map(node => \"P\" + node.id + \": (\" + node.x + \", \" + node.y + \")\").join(\"<br>\");\n    html += \"<hr>\";       \n    const pathLength = Math.min(nnAnimation.currentPathIndex + 1, nnAnimation.nnPath.length);\n    let path = nnAnimation.nnPath.slice(0, pathLength).map(node => \"P\" + node).join(\" → \");       \n    if (nnAnimation.currentPathIndex >= nnAnimation.selectionSteps.length) {\n        let totalLength = 0;\n        for (let i = 1; i < nnAnimation.nnPath.length; i++) {\n            totalLength += nnAnimation.distance(\n                nnAnimation.nodes[nnAnimation.nnPath[i - 1]], \n                nnAnimation.nodes[nnAnimation.nnPath[i]]\n            );\n        }\n        path += `<br><br><span style='font-size: 1.2em;'><strong>Gesamtlänge: ${totalLength.toFixed(2)}</strong></span>`;\n        // Anzeige des aktuellen Startpunkts\n        path += `<br><strong>Aktueller Startpunkt:</strong> P${nnAnimation.startNode}`;\n    }       \n    html += `<strong>Aktueller Pfad:</strong><br>${path}`;\n    dataOutput.innerHTML = html;        \n    stepDropdown.innerHTML = '<option value=\"\">Schritt auswählen...</option>';\n    nnAnimation.selectionSteps.forEach((step, stepIndex) => {\n        stepDropdown.innerHTML += `<option value=\"${stepIndex}\">Schritt ${stepIndex + 1}: P${step.current}</option>`;\n    });        \n    stepDetails.innerHTML = \"\";        \n    fullTable.style.display = \"none\";\n    fullTable.innerHTML = \"\";\n    \n    // Manuelle Anwendung der Textfarbe für nnDataOutput im Dark Mode\n    if (isDarkMode()) {\n        dataOutput.style.color = getTextColor();\n        const elements = dataOutput.querySelectorAll('*');\n        elements.forEach(el => {\n            if (!el.style.color || el.style.color === \"\") {\n                el.style.color = getTextColor();\n            }\n        });\n    }\n}\nfunction nnShowStepDetails() {\n    const stepDropdown = document.getElementById('nnStepDropdown');\n    const stepDetails = document.getElementById('nnStepDetails');\n    if (!stepDropdown || !stepDetails || !nnAnimation) return;\n    const stepIndex = parseInt(stepDropdown.value);\n    if (isNaN(stepIndex) || stepIndex < 0 || stepIndex >= nnAnimation.selectionSteps.length) {\n        stepDetails.innerHTML = \"\";\n        return;\n    }\n    const step = nnAnimation.selectionSteps[stepIndex];\n    let html = `<strong>Schritt ${stepIndex + 1}:</strong><br>`;\n    html += `<strong>Aktueller Knoten:</strong> P${step.current}<br>`;\n    html += \"<strong>Kandidaten:</strong><br>\";\n    html += \"<ul>\";\n    step.candidates.forEach(candidate => {\n        html += `<li>P${candidate.node}: Entfernung = ${candidate.distance.toFixed(2)} ${\n            candidate.isNearest ? \"(Ausgewählt)\" : \"\"\n        }</li>`;\n    });\n    html += \"</ul>\";\n    stepDetails.innerHTML = html;\n}\nfunction nnShowFullTable() {\n    const fullTableDiv = document.getElementById('nnFullTable');\n    if (!fullTableDiv || !nnAnimation) return;\n    let html = \"<h4></h4>\";\n    html += \"<table class='selection-table' style='width: 100%; border-collapse: collapse;'>\";\n    html += \"<tr><th>Schritt</th><th>Aktueller Knoten</th><th>Kandidat</th><th>Entfernung</th><th>Ausgewählt</th></tr>\";   \n    nnAnimation.selectionSteps.forEach((step, stepIndex) => {\n        step.candidates.forEach(candidate => {\n            html += candidate.isNearest ? \"<tr class='selected'>\" : \"<tr>\";\n            html += `<td style=\"border: 1px solid #ddd; padding: 4px; text-align: center;\">${stepIndex + 1}</td>`;\n            html += `<td style=\"border: 1px solid #ddd; padding: 4px; text-align: center;\">P${step.current}</td>`;\n            html += `<td style=\"border: 1px solid #ddd; padding: 4px; text-align: center;\">P${candidate.node}</td>`;\n            html += `<td style=\"border: 1px solid #ddd; padding: 4px; text-align: center;\">${candidate.distance.toFixed(2)}</td>`;\n            html += `<td style=\"border: 1px solid #ddd; padding: 4px; text-align: center;\">${candidate.isNearest ? \"✓\" : \"\"}</td>`;\n            html += \"</tr>\";\n        });\n    });  \n    html += \"</table>\";      \n    fullTableDiv.innerHTML = html;\n    fullTableDiv.style.display = 'block';\n}\nfunction nnToggleFullTable() {\n    const fullTableDiv = document.getElementById('nnFullTable');\n    if (!fullTableDiv) return;\n    if (fullTableDiv.style.display === 'none' || !fullTableDiv.innerHTML.trim()) {\n        nnShowFullTable();\n    } else {\n        fullTableDiv.style.display = 'none';\n    }\n}\nfunction nnNextStep() {\n    if (!nnAnimation) return;   \n    if (nnAnimation.currentPathIndex > nnAnimation.selectionSteps.length) {\n        nnAnimation.ctx.clearRect(0, 0, 100, 50);\n        nnAnimation.drawNodes(true);\n        nnAnimation.drawPath(nnAnimation.nnPath.length - 1);\n        return;\n    }  \n    nnAnimation.nextStep();   \n    nnUpdateInfoPanel();     \n    if (nnAnimation.currentPathIndex > nnAnimation.selectionSteps.length) {\n        nnAnimation.ctx.clearRect(0, 0, 100, 50);\n        nnAnimation.drawNodes(true);\n        nnAnimation.drawPath(nnAnimation.nnPath.length - 1);       \n        let totalLength = 0;\n        for (let i = 1; i < nnAnimation.nnPath.length; i++) {\n            totalLength += nnAnimation.distance(\n                nnAnimation.nodes[nnAnimation.nnPath[i - 1]], \n                nnAnimation.nodes[nnAnimation.nnPath[i]]\n            );\n        }    \n        nnUpdateInfoPanel();        \n        nnStopAutoAnimation();\n    }\n}\nfunction nnResetAnimation() {\n    nnStopAutoAnimation();\n    if (nnAnimation) {\n        nnAnimation.ctx.clearRect(0, 0, 100, 50);\n        nnAnimation.currentPathIndex = 0;\n        nnAnimation.drawNodes(true);\n        nnUpdateInfoPanel();\n    }\n}\nfunction nnToggleAutoAnimation() {\n    if (nnAutoIntervalId) {\n        nnStopAutoAnimation();\n    } else {\n        nnStartAutoAnimation();\n    }\n}\nfunction nnStartAutoAnimation() {\n    if (nnAutoIntervalId) return;\n    const slider = document.getElementById('nnSpeedSlider');\n    if (!slider) return;\n    const percent = parseInt(slider.value);\n    const speed = 1000 * (100 / percent);\n    nnAutoIntervalId = setInterval(() => {\n        nnNextStep();\n    }, speed);\n}\nfunction nnStopAutoAnimation() {\n    if (nnAutoIntervalId) {\n        clearInterval(nnAutoIntervalId);\n        nnAutoIntervalId = null;\n    }\n}\nfunction nnUpdateNumPoints() {\n    nnStopAutoAnimation();\n    const numPoints = parseInt(document.getElementById('nnNumPoints').value);    \n    if (isNaN(numPoints) || numPoints < 3 || numPoints > 25) {\n        alert(\"Bitte geben Sie eine gültige Anzahl von Punkten zwischen 3 und 25 ein.\");\n        return;\n    }       \n    const startPoint = parseInt(document.getElementById('nnStartPoint').value);\n    nnAnimation = new NearestNeighborAnimation(document.getElementById('nnCanvas'), numPoints, startPoint);    \n    nnAnimation.ctx.clearRect(0, 0, 100, 50);\n    nnAnimation.drawNodes(true);     \n    nnUpdateInfoPanel();\n}\nfunction nnUpdateStartPoint() {\n    nnStopAutoAnimation();\n    const startPoint = parseInt(document.getElementById('nnStartPoint').value);    \n    // Prüfen ob der Startpunkt gültig ist\n    if (isNaN(startPoint) || startPoint < 0 || startPoint >= nnAnimation.nodes.length) {\n        alert(`Bitte geben Sie einen gültigen Startpunkt zwischen 0 und ${nnAnimation.nodes.length - 1} ein.`);\n        return;\n    } \n    // Speichern der aktuellen Knoten\n    const currentNodes = JSON.parse(JSON.stringify(nnAnimation.nodes));     \n    // Erstellen einer neuen Animation mit dem neuen Startpunkt aber den bestehenden Knoten\n    nnAnimation = new NearestNeighborAnimation(document.getElementById('nnCanvas'), nnAnimation.numNodes, startPoint);\n    nnAnimation.nodes = currentNodes; // Bestehende Knoten übernehmen  \n    // Neuberechnung des Nearest-Neighbor-Pfades mit dem neuen Startpunkt\n    nnAnimation.computeNearestNeighborPath(); \n    nnAnimation.ctx.clearRect(0, 0, 100, 50);\n    nnAnimation.drawNodes(true);\n    nnUpdateInfoPanel();\n}\nfunction nnImportPoints() {\n    if (typeof animation !== 'undefined' && animation && animation.nodes) {\n        if (nnAnimation) {\n            nnAnimation.importChristofidesPoints();\n            nnResetAnimation();\n            nnUpdateInfoPanel();\n        }\n    } else {\n        console.log(\"Christofides-Animation nicht gefunden oder keine Punkte verfügbar\");\n    }\n}\nfunction nnImportBFPoints() {\n    if (typeof bfAnimation !== 'undefined' && bfAnimation && bfAnimation.nodes) {\n        if (nnAnimation) {\n            nnAnimation.importBFPoints();\n            nnResetAnimation();\n            nnUpdateInfoPanel();\n        }\n    } else {\n        console.log(\"BF-Animation nicht gefunden oder keine Punkte verfügbar\");\n    }\n}\nfunction nnToggleConstellation(selectedType) {\n    console.log(\"nnToggleConstellation aufgerufen mit:\", selectedType);\n    nnStopAutoAnimation();    \n    if (!selectedType) {\n        console.log(\"Kein Sternenbild ausgewählt\");\n        return;\n    } \n    try {\n        const startPoint = parseInt(document.getElementById('nnStartPoint').value);\n        nnAnimation = new NearestNeighborAnimation(document.getElementById('nnCanvas'), 0, startPoint);\n        console.log(\"Animation erstellt\");\n        nnAnimation.nodes = createConstellationNodes(selectedType, 0);\n        console.log(\"Knoten erzeugt:\", nnAnimation.nodes.length);\n        nnAnimation.numNodes = nnAnimation.nodes.length;\n        nnAnimation.computeNearestNeighborPath();\n        console.log(\"Pfad berechnet\"); \n        nnAnimation.currentPathIndex = 0;\n        nnAnimation.ctx.clearRect(0, 0, 100, 50);\n        nnAnimation.drawNodes(true); \n        nnUpdateInfoPanel();\n        console.log(\"UI aktualisiert\");  \n        document.getElementById('nnNumPoints').value = nnAnimation.nodes.length;\n    } catch (error) {\n        console.error(\"Fehler in nnToggleConstellation:\", error);\n    }\n}\nfunction nnGenerateRandomPoints() {\n    nnStopAutoAnimation();  \n    // Die Anzahl der Punkte aus dem Eingabefeld lesen\n    const numPoints = parseInt(document.getElementById('nnNumPoints').value);\n    // Startpunkt aus dem Eingabefeld lesen\n    const startPoint = parseInt(document.getElementById('nnStartPoint').value);  \n    // Prüfen ob die Anzahl der Punkte gültig ist\n    if (isNaN(numPoints) || numPoints < 3 || numPoints > 25) {\n        alert(\"Bitte geben Sie eine gültige Anzahl von Punkten zwischen 3 und 25 ein.\");\n        return;\n    }   \n    // Neue Animation mit den angegebenen Parametern erstellen\n    nnAnimation = new NearestNeighborAnimation(document.getElementById('nnCanvas'), numPoints, startPoint); \n    // Canvas löschen und neu zeichnen\n    nnAnimation.ctx.clearRect(0, 0, 100, 50);\n    nnAnimation.drawNodes(true);  \n    // Infopanel aktualisieren\n    nnUpdateInfoPanel();\n}\nfunction nnDownloadGraph() {\n    const canvas = document.getElementById('nnCanvas');\n    if (!canvas) return;  \n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = canvas.width;\n    tmpCanvas.height = canvas.height;\n    const tmpCtx = tmpCanvas.getContext('2d'); \n    tmpCtx.fillStyle = 'white';\n    tmpCtx.fillRect(0, 0, tmpCanvas.width, tmpCanvas.height);  \n    tmpCtx.drawImage(canvas, 0, 0);  \n    const link = document.createElement('a');\n    link.download = 'nearest-neighbor-graph.png';\n    link.href = tmpCanvas.toDataURL('image/png');\n    link.click();\n} \nfunction nnFindBestStartPoint() {\n    if (!nnAnimation || !nnAnimation.nodes || nnAnimation.nodes.length < 2) return; \n    nnStopAutoAnimation();  \n    // Speichern der aktuellen Knoten\n    const currentNodes = JSON.parse(JSON.stringify(nnAnimation.nodes));\n    const numNodes = currentNodes.length;   \n    // Für jeden möglichen Startpunkt die Tourlänge berechnen\n    let bestStartPoint = 0;\n    let shortestDistance = Infinity;\n    const results = [];   \n    for (let startPoint = 0; startPoint < numNodes; startPoint++) {\n        // Nearest Neighbor Pfad für diesen Startpunkt berechnen\n        const visited = new Set([startPoint]);\n        const path = [startPoint];\n        let current = startPoint;       \n        while (visited.size < numNodes) {\n            let nearest = null;\n            let minDistance = Infinity;\n            \n            for (let i = 0; i < numNodes; i++) {\n                if (!visited.has(i)) {\n                    const dist = nnAnimation.distance(currentNodes[current], currentNodes[i]);\n                    if (dist < minDistance) {\n                        minDistance = dist;\n                        nearest = i;\n                    }\n                }\n            }\n            \n            current = nearest;\n            visited.add(current);\n            path.push(current);\n        }\n        \n        // Gesamtpfadlänge berechnen (einschließlich Rückweg zum Startpunkt)\n        let totalDistance = 0;\n        for (let i = 0; i < path.length - 1; i++) {\n            totalDistance += nnAnimation.distance(\n                currentNodes[path[i]], \n                currentNodes[path[i + 1]]\n            );\n        }\n        // Rückweg zum Startpunkt\n        totalDistance += nnAnimation.distance(\n            currentNodes[path[path.length - 1]], \n            currentNodes[startPoint]\n        );\n        \n        // Pfad und Distanz speichern\n        results.push({\n            startPoint: startPoint,\n            distance: totalDistance,\n            path: [...path, startPoint]\n        });\n        \n        // Prüfen, ob dieser Startpunkt besser ist\n        if (totalDistance < shortestDistance) {\n            shortestDistance = totalDistance;\n            bestStartPoint = startPoint;\n        }\n    }\n    \n    // Sortiere die Ergebnisse nach Pfadlänge\n    results.sort((a, b) => a.distance - b.distance);\n    \n    // Theme-abhängige Farben\n    const isDark = isDarkMode();\n    const bgColor = isDark ? \"#1e3b1e\" : \"#e8ffe8\";\n    const borderColor = isDark ? \"#4CAF50\" : \"#4CAF50\";\n    const textColor = isDark ? \"#fff\" : \"#2E7D32\";\n    const tableHeaderBgColor = isDark ? \"#2a472a\" : \"#d4ffd4\";\n    \n    // Ergebnisanzeige im Panel\n    const dataOutput = document.getElementById('nnDataOutput');\n    if (dataOutput) {\n        let resultHTML = `\n            <div style=\"margin: 15px 0; padding: 15px; background-color: ${bgColor}; border: 2px solid ${borderColor}; border-radius: 5px;\">\n                <h4 style=\"margin-top: 0; color: ${textColor};\">Optimaler Startpunkt gefunden!</h4>\n                <p><strong>Bester Startpunkt:</strong> P${bestStartPoint}</p>\n                <p><strong>Pfadlänge:</strong> ${shortestDistance.toFixed(2)}</p>\n                <p><strong>Optimaler Pfad:</strong> ${results[0].path.map(p => `P${p}`).join(' → ')}</p>\n                <hr>\n                <h5>Alle Startpunkte im Vergleich:</h5>\n                <table class=\"selection-table\" style=\"width: 100%; margin-top: 10px; ${isDark ? 'color: ' + textColor + ';' : ''}\">\n                    <tr>\n                        <th>Rang</th>\n                        <th>Startpunkt</th>\n                        <th>Pfadlänge</th>\n                        <th>Vergleich zum Optimum</th>\n                    </tr>\n        `;\n        \n        // Füge alle Ergebnisse in die Tabelle ein\n        results.forEach((result, index) => {\n            const difference = ((result.distance / shortestDistance - 1) * 100).toFixed(2);\n            const rowClass = result.startPoint === bestStartPoint ? 'selected' : '';\n            const rowStyle = result.startPoint === bestStartPoint && isDark ? \n                `background-color: ${tableHeaderBgColor};` : '';\n            \n            resultHTML += `\n                <tr class=\"${rowClass}\" style=\"${rowStyle}\">\n                    <td style=\"text-align: center;\">${index + 1}</td>\n                    <td style=\"text-align: center;\">P${result.startPoint}</td>\n                    <td style=\"text-align: center;\">${result.distance.toFixed(2)}</td>\n                    <td style=\"text-align: center;\">${index === 0 ? 'Optimum' : '+' + difference + '%'}</td>\n                </tr>\n            `;\n        });\n        \n        resultHTML += `\n                </table>\n            </div>\n        `;\n        \n        dataOutput.innerHTML = resultHTML;\n        \n        // Sicherstellen, dass die Textfarbe im Dark Mode korrekt ist\n        if (isDark) {\n            const resultDiv = dataOutput.querySelector('div');\n            if (resultDiv) {\n                // Alle Text-Elemente in der Tabelle auf die richtige Farbe setzen\n                const textElements = resultDiv.querySelectorAll('p, td, th, h5');\n                textElements.forEach(el => {\n                    if (!el.style.color) {\n                        el.style.color = getTextColor();\n                    }\n                });\n            }\n        }\n    }\n    \n    // Besten Startpunkt in das Eingabefeld setzen\n    document.getElementById('nnStartPoint').value = bestStartPoint;\n    \n    // Animation mit dem besten Startpunkt neu starten\n    nnAnimation = new NearestNeighborAnimation(document.getElementById('nnCanvas'), numNodes, bestStartPoint);\n    nnAnimation.nodes = currentNodes; // Bestehende Knoten übernehmen\n    nnAnimation.computeNearestNeighborPath();\n    nnAnimation.ctx.clearRect(0, 0, 100, 50);\n    nnAnimation.drawNodes(true);\n    nnAnimation.drawPath(nnAnimation.nnPath.length - 1); // Zeige sofort den kompletten optimalen Pfad\n    \n    // Aktualisiere den Fortschritt der Animation, um den vollständigen Pfad anzuzeigen\n    nnAnimation.currentPathIndex = nnAnimation.selectionSteps.length + 1;\n    \n    // Erneut das Theme anwenden für sicheren Dark Mode-Support\n    updateInfoPanelsStyle();\n}\n// Event-Listener\ndocument.getElementById('nnSpeedSlider')?.addEventListener('input', function() {\n    if (nnAutoIntervalId) {\n        clearInterval(nnAutoIntervalId);\n        const percent = parseInt(this.value);\n        const speed = 1000 * (100 / percent);\n        nnAutoIntervalId = setInterval(() => {\n            nnNextStep();\n        }, speed);\n    }\n});\n// Initialisierung beim Laden der Seite\ndocument.addEventListener('DOMContentLoaded', function() {\n    const canvas = document.getElementById('nnCanvas');\n    if (canvas) {\n        nnAnimation = new NearestNeighborAnimation(canvas, 4, 0);\n        nnAnimation.drawNodes(true);\n        nnUpdateInfoPanel();\n    }\n    \n    // Brute Force Animation initialisieren und Info-Panel aktualisieren\n    const bfCanvas = document.getElementById('bfCanvas');\n    if (bfCanvas) {\n        if (bfAnimation) {\n            bfAnimation.updateInfoPanel();\n        } else {\n            bfAnimation = new BruteForceAnimation(bfCanvas, 4, 0);\n            bfAnimation.updateInfoPanel();\n        }\n    }\n});\n// ================ BRUTE FORCE ALGORITHMUS ================\n// Brute Force Animation Klasse\nclass BruteForceAnimation {\n    constructor(canvas, numNodes = 4, startNode = 0) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.scale(canvas.width / 50, canvas.height / 50);\n        this.numNodes = numNodes;\n        this.startNode = startNode;\n        this.nodes = [];\n        this.permutations = [];\n        this.currentPermutationIndex = 0;\n        this.shortestPath = null;\n        this.shortestDistance = Infinity;\n        this.init();\n        this.drawNodes(true);\n        this.updateInfoPanel(); // Info-Panel beim Initialisieren aktualisieren\n    }\n    drawCoordinateSystem() {\n        this.ctx.strokeStyle = getGridColor();\n        this.ctx.lineWidth = 0.1;\n        for (let x = 0; x <= 50; x += 5) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(x, 0);\n            this.ctx.lineTo(x, 50);\n            this.ctx.stroke();\n        }\n        for (let y = 0; y <= 50; y += 5) {\n            this.ctx.beginPath();\n            this.ctx.moveTo(0, y);\n            this.ctx.lineTo(50, y);\n            this.ctx.stroke();\n        }\n    }\n    init() {\n        this.generateNodes();\n        this.permutations = this.generatePermutations([...Array(this.numNodes).keys()]);\n    }\n    generateNodes() {\n        for (let i = 0; i < this.numNodes; i++) {\n            this.nodes.push({\n                x: Math.floor(Math.random() * 40) + 5,\n                y: Math.floor(Math.random() * 40) + 5,\n                id: i\n            });\n        }\n    }\n    generatePermutations(array) {\n        // Wenn ein Startknoten festgelegt ist, generieren wir nur Permutationen, die mit dem Startknoten beginnen\n        const permutations = [];     \n        // Wir fixieren den Startknoten\n        const startNode = this.startNode;       \n        // Entferne den Startknoten aus dem Array\n        const remainingNodes = array.filter(node => node !== startNode);         \n        // Generiere alle Permutationen für die verbleibenden Knoten\n        if (remainingNodes.length === 0) {\n            return [[startNode]];\n        } else if (remainingNodes.length === 1) {\n            return [[startNode, remainingNodes[0]]];\n        }        \n        const restPerms = this.generateAllPermutations(remainingNodes);         \n        // Füge den Startknoten am Anfang jeder Permutation hinzu\n        for (const perm of restPerms) {\n            permutations.push([startNode, ...perm]);\n        }        \n        return permutations;\n    }\n       // Hilfsfunktion zum Generieren aller Permutationen ohne festen Startpunkt\n    generateAllPermutations(array) {\n        if (array.length === 1) return [array];\n        const perms = [];\n        for (let i = 0; i < array.length; i++) {\n            const rest = [...array.slice(0, i), ...array.slice(i + 1)];\n            const restPerms = this.generateAllPermutations(rest);\n            for (const perm of restPerms) {\n                perms.push([array[i], ...perm]);\n            }\n        }\n        return perms;\n    }\n    distance(a, b) {\n        return Math.sqrt((a.x - b.x) ** 2 + (a.y - b.y) ** 2);\n    }\n    calculatePathDistance(path) {\n        let distance = 0;\n        for (let i = 0; i < path.length - 1; i++) {\n            distance += this.distance(this.nodes[path[i]], this.nodes[path[i + 1]]);\n        }\n        distance += this.distance(this.nodes[path[path.length - 1]], this.nodes[path[0]]);\n        return distance;\n    }\n    drawNodes(showCoordinateSystem = false) {\n        if (showCoordinateSystem) {\n            this.drawCoordinateSystem();\n        }\n        this.nodes.forEach(node => {\n            this.ctx.beginPath();\n            this.ctx.arc(node.x, node.y, 0.5, 0, Math.PI * 2);\n            this.ctx.fillStyle = getPointColor();\n            this.ctx.fill();\n            this.ctx.font = \"1.5px sans-serif\";\n            this.ctx.fillStyle = getTextColor();\n            this.ctx.textAlign = \"center\";\n            const label = `P${node.id}`;\n            this.ctx.fillText(label, node.x, node.y - 1.2);\n        });\n    }\n    drawPath(path, color = 'blue') {\n        this.ctx.strokeStyle = color;\n        this.ctx.lineWidth = 0.3;\n        this.ctx.beginPath();\n        const startNode = this.nodes[path[0]];\n        this.ctx.moveTo(startNode.x, startNode.y);\n        for (let i = 1; i < path.length; i++) {\n            const node = this.nodes[path[i]];\n            this.ctx.lineTo(node.x, node.y);\n        }\n        this.ctx.lineTo(startNode.x, startNode.y);\n        this.ctx.stroke();\n    }\n    nextStep() {\n        if (this.currentPermutationIndex >= this.permutations.length) {\n            // Wenn alle Permutationen getestet wurden, lösche alle roten Geraden\n            this.ctx.clearRect(0, 0, 50, 50);\n            this.drawNodes(true);\n            // Zeichne nur den kürzesten Pfad in grün\n            if (this.shortestPath) {\n                this.drawPath(this.shortestPath, 'green');\n            }            \n            // Die Punkte und Parameter werden durch die updateInfoPanel-Methode angezeigt\n            this.updateInfoPanel(true);\n            return;\n        }\n        const currentPath = this.permutations[this.currentPermutationIndex];\n        const currentDistance = this.calculatePathDistance(currentPath);\n        if (currentDistance < this.shortestDistance) {\n            this.shortestDistance = currentDistance;\n            this.shortestPath = currentPath;\n        }\n        this.ctx.clearRect(0, 0, 50, 50);\n        this.drawNodes(true);\n        this.drawPath(currentPath, 'red');\n        if (this.shortestPath) {\n            this.drawPath(this.shortestPath, 'green');\n        }\n        this.currentPermutationIndex++;\n        this.updateInfoPanel();\n    }\n    updateInfoPanel(isFinished = false) {\n        const dataOutput = document.getElementById('bfDataOutput');\n        let html = `<strong>Punkte:</strong><br>`;\n        html += this.nodes.map(node => \"P\" + node.id + \": (\" + node.x + \", \" + node.y + \")\").join(\"<br>\");\n        html += \"<hr>\";      \n        html += `<strong>Anzahl der Permutationen:</strong> ${this.permutations.length}<br>`;        \n        if (!isFinished) {\n            html += `<strong>Aktuelle Permutation:</strong> ${this.currentPermutationIndex} von ${this.permutations.length}<br><hr>`;         \n            if (this.currentPermutationIndex < this.permutations.length) {\n                html += `<strong>Aktueller Pfad:</strong> ${this.permutations[this.currentPermutationIndex].map(p => `P${p}`).join(' → ')}<br>`;\n                html += `<strong>Distanz der aktuellen Permutation:</strong> ${this.calculatePathDistance(this.permutations[this.currentPermutationIndex]).toFixed(2)}<br>`;\n            } else {\n                html += \"<strong>Alle Permutationen geprüft</strong><br>\";\n            }\n        } else {\n            html += `<strong>Alle Permutationen geprüft:</strong> ${this.permutations.length} von ${this.permutations.length}<br><hr>`;\n        }          \n        html += `<hr><strong>Kürzeste Distanz:</strong> ${this.shortestDistance !== Infinity ? this.shortestDistance.toFixed(2) : \"Noch nicht gefunden\"}<br>`;           \n        if (this.shortestPath) {\n            html += `<strong>Kürzester Pfad:</strong> ${this.shortestPath.map(p => `P${p}`).join(' → ')}<br>`;        \n            // Zeige detaillierte Ergebnisse an, wenn alle Permutationen geprüft wurden\n            if (isFinished || this.currentPermutationIndex >= this.permutations.length) {\n                html += `<hr><h4>Ergebnisanalyse:</h4>`;  \n                // Berechne Faktoriell für Vergleich\n                const factorial = n => n <= 1 ? 1 : n * factorial(n - 1);\n                const totalPermsWithoutFix = factorial(this.numNodes);\n                const totalPermsWithFix = factorial(this.numNodes - 1);     \n                html += `<strong>Geprüfte Permutationen:</strong> ${this.permutations.length}<br>`;\n                html += `<strong>Gesamtpermutationen ohne festen Startpunkt:</strong> ${totalPermsWithoutFix}<br>`;\n                html += `<strong>Ersparnis durch festen Startpunkt:</strong> ${totalPermsWithoutFix - totalPermsWithFix} Permutationen (${Math.round((1 - totalPermsWithFix/totalPermsWithoutFix) * 100)}%)<br><br>`;      \n                html += `<strong style=\"font-size: 1.2em;\">Gefundener optimaler Pfad:</strong><br>`;\n                html += `<span style=\"font-size: 1.1em;\">${this.shortestPath.map(p => `P${p}`).join(' → ')} → P${this.shortestPath[0]}</span><br>`;\n                html += `<strong>Gesamtlänge:</strong> <span style=\"color: green; font-weight: bold;\">${this.shortestDistance.toFixed(2)}</span><br>`;\n                // Einzelne Wegstücke mit Distanzen anzeigen\n                html += `<br><strong>Einzelne Abschnitte:</strong><br>`;\n                html += `<table class=\"selection-table\" style=\"width: 100%;\">`;\n                html += `<tr><th>Von</th><th>Nach</th><th>Distanz</th></tr>`;\n                // Füge alle Segmente des kürzesten Pfades hinzu\n                for (let i = 0; i < this.shortestPath.length - 1; i++) {\n                    const from = this.shortestPath[i];\n                    const to = this.shortestPath[i + 1];\n                    const dist = this.distance(this.nodes[from], this.nodes[to]);\n                    html += `<tr>\n                        <td style=\"text-align: center;\">P${from}</td>\n                        <td style=\"text-align: center;\">P${to}</td>\n                        <td style=\"text-align: center;\">${dist.toFixed(2)}</td>\n                    </tr>`;\n                }  \n                // Füge den Rückweg zum Startpunkt hinzu\n                const from = this.shortestPath[this.shortestPath.length - 1];\n                const to = this.shortestPath[0];\n                const dist = this.distance(this.nodes[from], this.nodes[to]);\n                html += `<tr>\n                    <td style=\"text-align: center;\">P${from}</td>\n                    <td style=\"text-align: center;\">P${to}</td>\n                    <td style=\"text-align: center;\">${dist.toFixed(2)}</td>\n                </tr>`;     \n                html += `<tr style=\"font-weight: bold;\">\n                    <td colspan=\"2\" style=\"text-align: right;\">Gesamtlänge:</td>\n                    <td style=\"text-align: center;\">${this.shortestDistance.toFixed(2)}</td>\n                </tr>`;\n                html += `</table>`;\n            }\n        } else {\n            html += \"<strong>Kürzester Pfad:</strong> Noch nicht gefunden\";\n        }        \n        dataOutput.innerHTML = html;\n    }\n    reset() {\n        this.currentPermutationIndex = 0;\n        this.shortestPath = null;\n        this.shortestDistance = Infinity;\n        this.ctx.clearRect(0, 0, 50, 50);\n        this.drawNodes(true);\n        this.updateInfoPanel();\n    }\n    importChristofidesPoints() {\n        if (typeof animation !== 'undefined' && animation && animation.nodes) {\n            this.nodes = JSON.parse(JSON.stringify(animation.nodes));\n            this.numNodes = this.nodes.length;\n            this.permutations = this.generatePermutations([...Array(this.numNodes).keys()]);\n            this.reset();\n        }\n    }\n    importNNPoints() {\n        if (typeof nnAnimation !== 'undefined' && nnAnimation && nnAnimation.nodes) {\n            this.nodes = JSON.parse(JSON.stringify(nnAnimation.nodes));\n            this.numNodes = this.nodes.length;\n            this.permutations = this.generatePermutations([...Array(this.numNodes).keys()]);\n            this.reset();\n        }\n    }\n}\nlet bfAnimation = new BruteForceAnimation(document.getElementById('bfCanvas'), 4, 0);\nlet bfAutoIntervalId = null;\nfunction bfNextStep() {\n    if (!bfAnimation) return;\n    bfAnimation.nextStep();\n}\nfunction bfStartAutoAnimation() {\n    if (bfAutoIntervalId) return;\n    const slider = document.getElementById('bfSpeedSlider');\n    const percent = parseInt(slider.value);\n    const speed = 1000 * (100 / percent);\n    bfAutoIntervalId = setInterval(() => {\n        bfAnimation.nextStep();\n    }, speed);\n}\nfunction bfToggleAutoAnimation() {\n    if (bfAutoIntervalId) {\n        bfStopAutoAnimation();\n    } else {\n        bfStartAutoAnimation();\n    }\n}\nfunction bfStopAutoAnimation() {\n    if (bfAutoIntervalId) {\n        clearInterval(bfAutoIntervalId);\n        bfAutoIntervalId = null;\n    }\n}\nfunction bfResetAnimation() {\n    bfStopAutoAnimation();\n    if (bfAnimation) {\n        bfAnimation.reset();\n    }\n}\nfunction bfUpdateNumPoints() {\n    const numPoints = parseInt(document.getElementById('bfNumPoints').value, 10);\n    const startPoint = parseInt(document.getElementById('bfStartPoint').value, 10);\n    if (isNaN(numPoints) || numPoints < 3 || numPoints > 25) {\n        alert(\"Bitte eine gültige Anzahl zwischen 3 und 25 eingeben\");\n        return;\n    }\n    bfAnimation = new BruteForceAnimation(document.getElementById('bfCanvas'), numPoints, startPoint);\n    bfAnimation.reset();\n}\nfunction bfUpdateStartPoint() {\n    bfStopAutoAnimation();\n    const startPoint = parseInt(document.getElementById('bfStartPoint').value);   \n    // Prüfen ob der Startpunkt gültig ist\n    if (isNaN(startPoint) || startPoint < 0 || startPoint >= bfAnimation.nodes.length) {\n        alert(`Bitte geben Sie einen gültigen Startpunkt zwischen 0 und ${bfAnimation.nodes.length - 1} ein.`);\n        return;\n    }    \n    // Speichern der aktuellen Knoten\n    const currentNodes = JSON.parse(JSON.stringify(bfAnimation.nodes));      \n    // Neue Animation mit dem neuen Startpunkt erstellen\n    bfAnimation = new BruteForceAnimation(document.getElementById('bfCanvas'), bfAnimation.numNodes, startPoint);       \n    // Bestehende Knoten übernehmen\n    bfAnimation.nodes = currentNodes;    \n    // Permutationen neu berechnen\n    bfAnimation.permutations = bfAnimation.generatePermutations([...Array(bfAnimation.numNodes).keys()]);     \n    // Animation zurücksetzen\n    bfAnimation.reset();\n}\nfunction bfImportChristofidesPoints() {\n    if (bfAnimation) {\n        bfAnimation.importChristofidesPoints();\n    }\n}\nfunction bfImportNNPoints() {\n    if (bfAnimation) {\n        bfAnimation.importNNPoints();\n    }\n}\nfunction bfToggleConstellation(selectedType) {\n    if (!selectedType) return;\n    // Erstelle eine neue BruteForceAnimation-Instanz\n    bfAnimation = new BruteForceAnimation(document.getElementById('bfCanvas'), 0);\n    // Setze die Knoten basierend auf dem ausgewählten Sternbild\n    bfAnimation.nodes = createConstellationNodes(selectedType, 0);\n    bfAnimation.numNodes = bfAnimation.nodes.length;\n    // Initialisiere die Permutationen und setze die Animation zurück\n    bfAnimation.permutations = bfAnimation.generatePermutations([...Array(bfAnimation.numNodes).keys()]);\n    bfAnimation.reset();\n}\nfunction bfDownloadGraph() {\n    const canvas = document.getElementById('bfCanvas');\n    const tmpCanvas = document.createElement('canvas');\n    tmpCanvas.width = canvas.width;\n    tmpCanvas.height = canvas.height;\n    const tmpCtx = tmpCanvas.getContext('2d');\n    tmpCtx.fillStyle = 'white';\n    tmpCtx.fillRect(0, 0, tmpCanvas.width, tmpCanvas.height);\n    tmpCtx.drawImage(canvas, 0, 0);\n    const link = document.createElement('a');\n    link.download = 'brute-force-graph.png';\n    link.href = tmpCanvas.toDataURL('image/png');\n    link.click();\n}\nfunction bfShowFullTable() {\n    const fullTableDiv = document.getElementById('bfFullTable');\n    if (!fullTableDiv || !bfAnimation) return;\n    \n    // Theme-abhängige Farben\n    const isDark = isDarkMode();\n    const bgColor = isDark ? \"#2a472a\" : \"#d4ffd4\";\n    const textColor = isDark ? \"#fff\" : \"#000\";\n    const highlightTextColor = isDark ? \"#4CAF50\" : \"#006400\";\n    \n    let html = \"<h4>Alle getesteten Pfade</h4>\";\n    html += \"<table class='selection-table' style='width: 100%; border-collapse: collapse;'>\";\n    html += \"<tr><th>Pfad</th><th>Distanz</th><th>Kürzester Pfad</th></tr>\";\n    \n    bfAnimation.permutations.forEach((path, index) => {\n        const distance = bfAnimation.calculatePathDistance(path).toFixed(2);\n        const isShortest = bfAnimation.shortestPath && bfAnimation.shortestPath.join(',') === path.join(',');\n        \n        // Verbesserte Stilisierung für den kürzesten Pfad\n        const rowStyle = isShortest ? \n            `background-color: ${bgColor}; font-weight: bold;` : '';\n            \n        const checkmarkStyle = isShortest ? \n            `color: ${highlightTextColor}; font-size: 1.2em; font-weight: bold;` : '';\n            \n        html += `<tr style=\"${rowStyle}\" class=\"${isShortest ? 'selected' : ''}\">`;\n        html += `<td style='border: 1px solid #ddd; padding: 4px; text-align: center;'>${path.map(p => `P${p}`).join(' → ')}</td>`;\n        html += `<td style='border: 1px solid #ddd; padding: 4px; text-align: center;'>${distance}</td>`;\n        html += `<td style='border: 1px solid #ddd; padding: 4px; text-align: center; ${checkmarkStyle}'>${isShortest ? \"✓\" : \"\"}</td>`;\n        html += \"</tr>\";\n    });\n    \n    html += \"</table>\";\n    fullTableDiv.innerHTML = html;\n    fullTableDiv.style.display = 'block';\n    \n    // Stelle sicher, dass die Tabellenborden im Dark Mode richtig angezeigt werden\n    if (isDark) {\n        const tableCells = fullTableDiv.querySelectorAll('td, th');\n        tableCells.forEach(cell => {\n            cell.style.borderColor = \"#555\";\n        });\n    }\n}\nfunction bfToggleFullTable() {\n    const fullTableDiv = document.getElementById('bfFullTable');\n    if (!fullTableDiv) return;\n    if (fullTableDiv.style.display === 'none' || !fullTableDiv.innerHTML.trim()) {\n        bfShowFullTable();\n    } else {\n        fullTableDiv.style.display = 'none';\n    }\n}\n</script>\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"brute-force-algorithm","depth":3,"text":"Brute Force Algorithm"},{"id":"nearest-neighbor-algorithm","depth":3,"text":"Nearest Neighbor Algorithm"},{"id":"christofides-algorithm","depth":3,"text":"Christofides Algorithm"}]}},"_type":"markdown","_id":"content:articles:5.Algo-vertretung-14-04-25.md","_source":"content","_file":"articles/5.Algo-vertretung-14-04-25.md","_stem":"articles/5.Algo-vertretung-14-04-25","_extension":"md"},{"_path":"/articles/neural-style-transfer","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Neural Style Transfer","description":"Fusion of 2 Pictures. The goal is to create a new image that combines the two styles.","cover":"https://raw.githubusercontent.com/Nr44suessauer/DeepLearning_assignment2/main/DeepLearning_assignment3/generated_creation%20of%20adam_with_mosaik.jpg","author":{"name":"Marc Nauendorf","avatarUrl":"https://pbs.twimg.com/profile_images/1042510623962275840/1Iw_Mvud_400x400.jpg"},"date":"2025-04-23T00:00:00.000Z","layout":"page","tags":["jupyter_notebook","TensorFlow","DeepLearning","SEM"],"body":{"type":"root","children":[{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 1; padding-right: 20px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This one of my assignments for Deep Learning. In this project, we are tasked with implementing our "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"own version based on the Neural Style Transfer tutorial from TensorFlow"}]},{"type":"text","value":". "},{"type":"element","tag":"a","props":{"href":"https://www.tensorflow.org/tutorials/generative/style_transfer"},"children":[{"type":"text","value":"tutorial"}]}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"primary objective is to generate mosaic windows"}]},{"type":"text","value":" featuring unique motifs that "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"influenced by modern elements"}]},{"type":"text","value":", "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 0 auto; margin-left: 20px; width: 25%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://upload.wikimedia.org/wikipedia/commons/thumb/5/5e/Kirchenfenster_Wasser.JPG/960px-Kirchenfenster_Wasser.JPG","alt":"Kirchenfenster","style":"width: 100%; height: auto;"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n        "}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: flex-start;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 0 30%; text-align: center;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/svg/1717856636_BraveHearth.jpg.svg","alt":"Inverted SVG of BraveHeart","style":"width: 100%; max-width: 225px; height: auto; border: 1px solid #ddd; border-radius: 0px; filter: invert(1);"},"children":[]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 1; padding-left: 20px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Future is then to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"convert these generated images into SVG files"}]},{"type":"text","value":". These "},{"type":"element","tag":"a","props":{"href":"https://en.wikipedia.org/wiki/SVG"},"children":[{"type":"text","value":"SVGs"}]},{"type":"text","value":" can later be used in applications like "},{"type":"element","tag":"a","props":{"href":"https://www.autodesk.com/de/products/fusion-360/overview?term=1-YEAR&tab=subscription#top"},"children":[{"type":"text","value":"Fusion 360"}]},{"type":"text","value":" "},{"type":"element","tag":"a","props":{"href":"https://de.wikipedia.org/wiki/Liste_von_CAD-Programmen"},"children":[{"type":"text","value":"(or similar software)"}]},{"type":"text","value":" to extrude the designs, thereby creating files that "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"can be 3D printed, laser cut, or manufactured by other means"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://convertio.co/de/jpg-svg/"},"children":[{"type":"text","value":"Online Converter"}]}]},{"type":"text","value":"\n        "},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: A Fusion 360 student account is provided free of charge."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n        "}]},{"type":"element","tag":"h3","props":{"id":"neural-style-transfer"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Neural Style Transfer"}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: flex-start;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 1; padding-right: 20px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This upcoming version is still a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"work in progress"}]},{"type":"text","value":" and currently meets the basic requirement of the assignment by focusing on the implementation aspect. "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/DeepLearning_assignment2/tree/main/DeepLearning_assignment3"},"children":[{"type":"text","value":"git project"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Colors are not really necessary for my model. However, if you aim to create this mosaic window, a colorful vision might be appreciated. The "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"next step"}]},{"type":"text","value":" will involve combining black-and-white mosaic images with colored content images to focus on the essentials. For later, with 1(B&W) instead of 3 dimensions(RGB)"}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 0 auto; margin-left: 20px; width: 35%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/DeepLearning_assignment2/main/DeepLearning_assignment3/generated_creation%20of%20adam_with_mosaik.jpg","alt":"Neural Style Mosaic","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n        "}]},{"type":"element","tag":"h3","props":{"id":"how-to-use"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"How to Use"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The Jupyter Notebook can be downloaded and, once all required libraries are installed, executed without issues."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"To update the images, simply specify a different path in the configuration."}]},{"type":"text","value":" The comments serve as both documentation and explanation of the code. You can also modify other configuration settings as needed."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Please note that if you plan to push this further, it is recommended to use a GPU. If you're using Nvidia hardware, refer to this link for more details: "},{"type":"element","tag":"a","props":{"href":"https://developer.nvidia.com/cuda-toolkit"},"children":[{"type":"text","value":"Nvidia CUDA Toolkit"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n        "}]},{"type":"element","tag":"h3","props":{"id":"examples"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Examples"}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/BraveHeart.png","alt":"Best Result","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/Generated_revan.png","alt":"Chobi 10 Steps","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/MyHeroGenerated.png","alt":"Composition 7 with Red","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/spongebob_generated.png","alt":"Great Wave at Kanagawa","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/starwars_generated.png","alt":"Creation of Adam with Mosaic","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/torfin_generated.png","alt":"Mona Lisa with Mosaic","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/vader.png","alt":"Starry Night","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 0 1 45%; max-width: 45%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pictures/jupyter/generated/vader2.png","alt":"Tubingen with Starry Night","style":"width: 100%; height: auto;","loading":"lazy"},"children":[]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n        "}]},{"type":"element","tag":"h3","props":{"id":"conclusion-for-my-goal"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Conclusion for my Goal"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create mosaic windows, I first tried a direct approach with my Configurator. However, I believe it would be "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"more effective to apply filters or algorithms that adjust the edges to form intuitive shapes."}]},{"type":"text","value":" This method will "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"separately detect outlines"}]},{"type":"text","value":" and use them as a grid to build the mosaic."}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n        "}]},{"type":"element","tag":"h3","props":{"id":"jupyter-notebook-implementation"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Jupyter Notebook Implementation"}]}]},{"type":"element","tag":"div","props":{"className":["notebook-container"],"style":"margin-top: 20px; margin-bottom: 20px;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"details","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"summary","props":{"style":"cursor: pointer; font-weight: bold; padding: 10px; background-color: #f0f0f0; border: 1px solid #ccc; border-radius: 5px; color: #000;"},"children":[{"type":"text","value":"\n            Jupyter Notebook: Complete Version (Click to Show/Hide)\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"style":"border: 1px solid #ddd; padding: 15px; margin-top: 10px; background-color: #f9f9f9; color: #000;"},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"iframe","props":{"src":"https://nbviewer.org/github/Nr44suessauer/DeepLearning_assignment2/blob/main/DeepLearning_assignment3/Assignment_3_mnauendo.ipynb","width":"100%","height":800,"style":"border: none;","allowFullScreen":true},"children":[{"type":"text","value":"\n            "}]},{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{"style":"text-align: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n                "},{"type":"element","tag":"a","props":{"href":"https://nbviewer.org/github/Nr44suessauer/DeepLearning_assignment2/blob/main/DeepLearning_assignment3/Assignment_3_mnauendo.ipynb","target":"_blank","style":"color: #000;"},"children":[{"type":"text","value":"\n                    Open Notebook on GitHub\n                "}]},{"type":"text","value":"\n            "}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/DeepLearning_assignment2/tree/main/DeepLearning_assignment3","rel":["nofollow"]},"children":[{"type":"text","value":"Code on Github"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"neural-style-transfer","depth":3,"text":"Neural Style Transfer"},{"id":"how-to-use","depth":3,"text":"How to Use"},{"id":"examples","depth":3,"text":"Examples"},{"id":"conclusion-for-my-goal","depth":3,"text":"Conclusion for my Goal"},{"id":"jupyter-notebook-implementation","depth":3,"text":"Jupyter Notebook Implementation"}]}},"_type":"markdown","_id":"content:articles:6.Neural-Style-Transfer.md","_source":"content","_file":"articles/6.Neural-Style-Transfer.md","_stem":"articles/6.Neural-Style-Transfer","_extension":"md"},{"_path":"/articles/cnn-digit-recognision","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"CNN | Digit Recognition with Mnist","description":"Base Example for a Convolutional Neural Network (CNN) using the MNIST dataset.","cover":"https://imgs.search.brave.com/p4KOOczozddKKz_EexZBtJteCcYALTJPszT1Ps81AnE/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9pbWFn/ZXMudHBvaW50dGVj/aC5jb20vdHV0b3Jp/YWwvdGVuc29yZmxv/dy9pbWFnZXMvbW5p/c3QtZGF0YXNldC1p/bi1jbm4uanBn","author":{"name":"Marc Nauendorf","avatarUrl":"https://pbs.twimg.com/profile_images/1042510623962275840/1Iw_Mvud_400x400.jpg"},"date":"2025-04-23T00:00:00.000Z","layout":"page","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"cnn-digit-recognition-with-mnist"},"children":[{"type":"text","value":"CNN | Digit Recognition with Mnist"}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: flex-start;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"flex: 1; padding-right: 10px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"h4","props":{"id":"about-the-mnist-dataset"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"About the MNIST Dataset"}]}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The MNIST dataset is a widely used collection of handwritten digits, serving as an introduction to deep learning and image processing. It consists of "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"70,000 grayscale images"}]},{"type":"text","value":" divided into training and testing sets, with each image representing a single handwritten digit from 0 to 9."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://upload.wikimedia.org/wikipedia/commons/2/27/MnistExamples.png","alt":"MNIST Examples","style":"max-width: 80%; height: auto;"},"children":[]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"h4","props":{"id":"characteristics-of-the-dataset"},"children":[{"type":"text","value":"Characteristics of the Dataset"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Size:"}]},{"type":"text","value":" 70,000 images (60,000 training images and 10,000 testing images)"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Image Format:"}]},{"type":"text","value":" 28x28 pixels in grayscale"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Applications:"}]},{"type":"text","value":" Classification, image processing, and machine learning"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Challenge:"}]},{"type":"text","value":" Despite its simplicity and small image size, the dataset forms a solid foundation for initial experiments with neural networks."}]}]},{"type":"element","tag":"h4","props":{"id":"significance-in-deep-learning"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Significance in Deep Learning"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"MNIST is a standard dataset for beginners in machine learning. It effectively demonstrates basic concepts of Convolutional Neural Networks (CNNs) and other classification algorithms. Thanks to its simplicity and numerous benchmarks, it is an "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"ideal starting point"}]},{"type":"text","value":" for training, evaluating, and optimizing models."}]},{"type":"element","tag":"h4","props":{"id":"additional-features"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Additional Features"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The neural network is "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"fully configurable"}]},{"type":"text","value":", allowing adjustments to the architecture and training parameters."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"At the end, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"custom digits can be tested to evaluate the model's performance on user-provided data."}]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"My 1 looks like a comination of 7 & 1 in the Mnist dataset, the result accordingly"}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n    "}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/DeepLearning_assignment2/blob/main/mnauendo_Simple%20MNIST%20Handwritten%20Digit%20Recognition.ipynb","rel":["nofollow"]},"children":[{"type":"text","value":"GitRepo"}]},{"type":"element","tag":"br","props":{},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.tensorflow.org/datasets/keras_example","rel":["nofollow"]},"children":[{"type":"text","value":"Tutorial from Tensorflow"}]}]},{"type":"element","tag":"div","props":{"style":"border: 1px solid #ddd; padding: 15px; margin-top: 10px; background-color: #f9f9f9;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"iframe","props":{"src":"https://nbviewer.org/github/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/jupyter/mnauendo_Simple%20MNIST%20Handwritten%20Digit%20Recognition.ipynb","width":"100%","height":800,"style":"border: none;","allowFullScreen":true},"children":[{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"p","props":{"style":"text-align: center; margin-top: 10px;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/jupyter/mnauendo_Simple%20MNIST%20Handwritten%20Digit%20Recognition.ipynb","target":"_blank"},"children":[{"type":"text","value":"\n            Open Notebook on GitHub\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; margin-top: 30px;"},"children":[{"type":"text","value":"\n    "}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:articles:7.CNN-digit-recognision.md","_source":"content","_file":"articles/7.CNN-digit-recognision.md","_stem":"articles/7.CNN-digit-recognision","_extension":"md"},{"_path":"/articles/octoprint-server","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Octoprint Server for 3D Printers","description":"Server with controlable microcontroller and cameras","cover":"https://octoprint.org/assets/img/logo.png","author":{"name":"Marc Nauendorf","avatarUrl":"https://pbs.twimg.com/profile_images/1042510623962275840/1Iw_Mvud_400x400.jpg"},"date":"2025-04-23T00:00:00.000Z","layout":"page","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"octoprint-server-for-3d-printers"},"children":[{"type":"text","value":"Octoprint Server for 3D Printers"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The project \"3D Printer & Server Tuning\" combines innovative approaches in embedded systems with practical applications in the field of 3D printing. The goal is to develop a modular and expandable system that allows both students and technology enthusiasts to deepen their knowledge of 3D printing, microcontrollers, and Raspberry Pi. The setup integrates multiple 3D printers, cameras, LED light controls, and a physical input unit. The focus is on playful expandability and support through comprehensive interfaces."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The project includes the repair and tuning of a Taz-3 printer, the development of an illuminated server case, and the implementation of control systems via ArduinoBoards and Raspberry Pi. Through experiments with hardware and software, a robust and versatile system has been created, distinguished by its user-friendly and visually appealing design."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The documentation provides valuable insights into the challenges and solutions in development, including potential expansions such as using Octoprint for multiple printers and cameras, as well as performance tests with compact systems like the Raspberry Pi Zero. This project serves not only as a practical learning tool but also lays the foundation for future smart home applications."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Please note that the video and documentation are in German as they were part of a Bachelor course. Upon request, I am happy to provide more information about projects like this."}]},{"type":"element","tag":"div","props":{"style":"display: flex; flex-wrap: wrap; width: 100%;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"iframe","props":{"width":560,"height":315,"src":"https://www.youtube.com/embed/0iTQ-RBdDN0","frameBorder":"0","allowFullScreen":true,"style":"flex: 1; margin-right: 10px;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"iframe","props":{"src":"https://docs.google.com/viewer?url=https://raw.githubusercontent.com/Nr44suessauer/nr44suessauer.github.io/main/nuxt-app/assets/pdf/Projekt%203D%20Druck%20Doku.pdf&embedded=true","width":"100%","height":"500px","style":"flex: 1;"},"children":[]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:articles:8.Octoprint-server.md","_source":"content","_file":"articles/8.Octoprint-server.md","_stem":"articles/8.Octoprint-server","_extension":"md"},{"_path":"/articles/plant-uml","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"PlantUML Installation Guide","description":"PlantUML is a tool for creating UML diagrams from plain text descriptions. It is widely used in software development and documentation.","cover":"https://imgs.search.brave.com/-SA2KvLz0gSTCG8wrPWPuIejFBUTp1l186nxhw7ZwHE/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly91cGxv/YWQud2lraW1lZGlh/Lm9yZy93aWtpcGVk/aWEvY29tbW9ucy8z/LzMwL1BsYW50dW1s/X0xvZ28uc3Zn","author":{"name":"Marc Nauendorf"},"date":"2025-04-23T00:00:00.000Z","layout":"page","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"plantuml-installation-guide"},"children":[{"type":"text","value":"PlantUML Installation Guide"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This guide will help you set up PlantUML on your system, including the necessary prerequisites and configuration steps."}]},{"type":"element","tag":"div","props":{"style":"display: flex; justify-content: space-between; align-items: center;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/Blog_diagram/plantUML1.png?raw=true","width":225},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/Blog_diagram/plantUML3.png?raw=true","width":184},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/Blog_diagram/plantUML4.png?raw=true","width":242},"children":[]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Diagrams are created using the PlantUML tool. The final images are generated from a source file, which must be created beforehand by the documenting developer."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The tool can be downloaded and installed as a "},{"type":"element","tag":"a","props":{"href":"https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml","rel":["nofollow"]},"children":[{"type":"text","value":"VSCode Extension"}]},{"type":"text","value":" (recommended) or via the "},{"type":"element","tag":"a","props":{"href":"https://plantuml.com/download","rel":["nofollow"]},"children":[{"type":"text","value":"PlantUML Website"}]},{"type":"text","value":". On this website, you will also find information on how to write PlantUML diagrams."}]},{"type":"element","tag":"h4","props":{"id":"prerequisites"},"children":[{"type":"text","value":"Prerequisites"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"An installed "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"JAVA Runtime Environment"}]},{"type":"text","value":" listed in the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"environment variables"}]}]},{"type":"text","value":"."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"a","props":{"href":"https://plantuml.com/download","rel":["nofollow"]},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"PlantUML JAR"}]}]},{"type":"text","value":" file."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For further information on the installation and prerequisites of the VSCode extension, click "},{"type":"element","tag":"a","props":{"href":"https://github.com/qjebbs/vscode-plantuml/blob/master/README.md","rel":["nofollow"]},"children":[{"type":"text","value":"here"}]},{"type":"text","value":"."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h4","props":{"id":"java-environment-variables-windows"},"children":[{"type":"text","value":"Java Environment Variables Windows"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"JAVA"}]},{"type":"text","value":" has been downloaded and installed from their "},{"type":"element","tag":"a","props":{"href":"https://www.java.com/de/download/","rel":["nofollow"]},"children":[{"type":"text","value":"website"}]},{"type":"text","value":", the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Path"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"JAVA_HOME"}]},{"type":"text","value":" environment variables need to be created or expanded. (On Linux, this should happen automatically during installation.)"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"On Windows, go to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"System Properties -> Advanced System Settings -> Environment Variables"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h5","props":{"id":"java_home"},"children":[{"type":"text","value":"JAVA_HOME"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a new entry named "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"JAVA_HOME"}]},{"type":"text","value":" under either user or system variables. In this, the path to the main directory of the installed "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Java Runtime Environment"}]},{"type":"text","value":" is stored."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For instance, it might look like this:"}]},{"type":"element","tag":"pre","props":{"code":"C:\\Program files\\Java\\jre-1.8\\\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"C:\\Program files\\Java\\jre-1.8\\\n"}]}]},{"type":"element","tag":"h5","props":{"id":"path"},"children":[{"type":"text","value":"Path"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Either expand the already existing "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Path"}]},{"type":"text","value":" variable using the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"edit"}]}]},{"type":"text","value":" field or create it anew if the variable does not exist yet. This variable contains the path to the executable Java file."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example:"}]},{"type":"element","tag":"pre","props":{"code":"C:\\Program files\\java\\jre-1.8\\bin\\\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"C:\\Program files\\java\\jre-1.8\\bin\\\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"can alternatively be written as:"}]},{"type":"element","tag":"pre","props":{"code":"%JAVA_HOME%\\bin\\\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"%JAVA_HOME%\\bin\\\n"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h4","props":{"id":"plantuml-jar"},"children":[{"type":"text","value":"PlantUML JAR"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To use the PlantUML JAR file, download it from their "},{"type":"element","tag":"a","props":{"href":"https://plantuml.com/download","rel":["nofollow"]},"children":[{"type":"text","value":"website"}]},{"type":"text","value":" (the license can be chosen freely). After downloading, save it in a known location on your file system."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example:"}]},{"type":"element","tag":"pre","props":{"code":"C:\\Users\\USER\\JAR-Files\\plantuml.jar\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"C:\\Users\\USER\\JAR-Files\\plantuml.jar\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This path is important for using the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"local renderer"}]},{"type":"text","value":" of the VSCode extension for PlantUML. It is also needed if you want to run PlantUML directly using the JAR file."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h4","props":{"id":"plantuml-vscode-extension-settings"},"children":[{"type":"text","value":"PlantUML VSCode Extension Settings"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When using PlantUML as a VSCode extension, some adjustments need to be made in the extension settings. After the VSCode extension has been installed, click on Extensions -> PlantUML on the gear icon next to the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Uninstall"}]}]},{"type":"text","value":" field and select "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Extension Settings"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Export Settings"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nPlease enter:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"under "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Diagrams Root"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"code":"docs/diagramms/src\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docs/diagramms/src\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"and under "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Export Out Dir"}]},{"type":"text","value":":"}]},{"type":"element","tag":"pre","props":{"code":"docs/diagrams/out\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docs/diagrams/out\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Additional settings (which should be default) include:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Export Concurrency: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"3"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Export Include Folder Hierarchy: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"true"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Export Sub Folder: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"true"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This should ensure that all necessary subfolders and the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"out/"}]},{"type":"text","value":" folder itself are correctly created when exporting the diagrams."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Generation Settings"}]},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\nTo generate images from the source files and to display a preview of the diagram, the PlantUML JAR and Java must be specified and a render mode selected."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To do this, under "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Jar"}]},{"type":"text","value":", specify the path to the downloaded "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"plantuml.jar"}]},{"type":"text","value":" file."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example:"}]},{"type":"element","tag":"pre","props":{"code":"C:\\Users\\USER\\JAR-Files\\plantuml.jar\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"C:\\Users\\USER\\JAR-Files\\plantuml.jar\n"}]}]},{"type":"element","tag":"h5","props":{"id":"important"},"children":[{"type":"text","value":"Important"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Specify the full file path, including file name and extension."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Under "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Java"}]},{"type":"text","value":", provide the path to your "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Java Executable"}]},{"type":"text","value":","}]},{"type":"element","tag":"pre","props":{"code":"C:\\Program files\\java\\jre-1.8\\bin\\java\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"C:\\Program files\\java\\jre-1.8\\bin\\java\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"or, if environment variables are set correctly, simply"}]},{"type":"element","tag":"pre","props":{"code":"java\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"java\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Lastly, under:"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Render"}]},{"type":"text","value":", select the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Local"}]},{"type":"text","value":" option."}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, VSCode should be restarted once to apply the changes."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Finally, VSCode should be restarted once to apply the changes."}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"diagram-structure"},"children":[{"type":"text","value":"Diagram Structure"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In the subfolder "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"diagrams/"}]},{"type":"text","value":", you'll find the created diagrams in PlantUML format. This is further divided into "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"src/"}]},{"type":"text","value":" and "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"out/"}]},{"type":"text","value":" folders."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"src/"}]},{"type":"text","value":" folder is divided into folders for the respective subprojects and contains the source files of the diagrams, with a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":".puml"}]},{"type":"text","value":" file extension."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":".puml"}]},{"type":"text","value":" file, several diagrams can be present, and each file is exported to its own folder in the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"out/"}]},{"type":"text","value":" directory upon export. This allows a file to be used for several diagrams of a (sub-)system or a component."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"For example, a file named "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"CLI.puml"}]},{"type":"text","value":" could be created for a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"CLI"}]},{"type":"text","value":" in the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"docs/diagrams/src/something/"}]},{"type":"text","value":" folder. This file could contain both a flow diagram and a component diagram to illustrate the flow of the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"CLI"}]},{"type":"text","value":" and its constituent components."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"When the diagrams from this file are now exported, assuming the settings mentioned above are correct, they can be found in a folder with the path "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"docs/diagrams/out/something/CLI/"}]},{"type":"text","value":". Consequently, the specified folder would contain an image file for the flow diagram and an image file for the component diagram."}]},{"type":"element","tag":"h3","props":{"id":"usage"},"children":[{"type":"text","value":"Usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Hotkey: ALT + D"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"diagram-structure","depth":3,"text":"Diagram Structure"},{"id":"usage","depth":3,"text":"Usage"}]}},"_type":"markdown","_id":"content:articles:9.plant-uml.md","_source":"content","_file":"articles/9.plant-uml.md","_stem":"articles/9.plant-uml","_extension":"md"},{"_path":"/articles/platformio","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"VsCode & PlatformIO","description":"Extension for Visual Studio Code to develop embedded systems.","cover":"https://imgs.search.brave.com/RggkSViOrgviWP_SirNwH0aHRA5hGEl35Wn0uhmYppg/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly91cGxv/YWQud2lraW1lZGlh/Lm9yZy93aWtpcGVk/aWEvY29tbW9ucy9j/L2NkL1BsYXRmb3Jt/SU9fbG9nby5zdmc","date":"2022-08-23T00:00:00.000Z","layout":"article","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"vscode-platformio"},"children":[{"type":"text","value":"VsCode & PlatformIO"}]},{"type":"element","tag":"img","props":{"src":"https://hack.depta.dev/uploads/upload_314d7020e9b723d1e35b947897c27788.png","style":"max-width:80%; height:auto;","alt":""},"children":[]},{"type":"element","tag":"h2","props":{"id":"installation"},"children":[{"type":"text","value":"Installation"}]},{"type":"element","tag":"h3","props":{"id":"_1-vscode"},"children":[{"type":"text","value":"1. VSCode"}]},{"type":"element","tag":"img","props":{"src":"https://hack.depta.dev/uploads/upload_3bb7c9551a88732ab577e90b7d311ef4.png","style":"max-width:80%; height:auto;","alt":""},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Download: "},{"type":"element","tag":"a","props":{"href":"https://code.visualstudio.com/","rel":["nofollow"]},"children":[{"type":"text","value":"https://code.visualstudio.com/"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h3","props":{"id":"_2-platformio-extension"},"children":[{"type":"text","value":"2. PlatformIO Extension"}]},{"type":"element","tag":"img","props":{"src":"https://hack.depta.dev/uploads/upload_ea4fa86035e278fe73d72320c1026f88.png","style":"max-width:80%; height:auto;","alt":""},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Select the Extensions tab"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Enter \"PlatformIO\" in the search"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Select PlatformIO from the search results"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Install PlatformIO. VSCode will restart after installation."}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"creating-a-project"},"children":[{"type":"text","value":"Creating a Project"}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Select the PlatformIO extension"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Choose "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"PIO Home"}]}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Select "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"New Project"}]}]}]},{"type":"element","tag":"img","props":{"src":"https://hack.depta.dev/uploads/upload_9a532915a17ab2fc2e862e44b2561278.PNG","style":"max-width:80%; height:auto;","alt":""},"children":[]},{"type":"element","tag":"ol","props":{"start":4},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Select "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Board & Framework"}]},{"type":"text","value":":"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Board"}]},{"type":"text","value":": ATmega328P (or Arduino Uno)."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Framework"}]},{"type":"text","value":": "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"None"}]},{"type":"text","value":"."}]}]},{"type":"element","tag":"ol","props":{"start":5},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Wait for PlatformIO to create the project."}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"platformio-folder-structure"},"children":[{"type":"text","value":"PlatformIO Folder Structure"}]},{"type":"element","tag":"img","props":{"src":"https://hack.depta.dev/uploads/upload_c5bca1067f233a19ddfeba6c2f673bc1.PNG","style":"max-width:25%; height:auto;","alt":""},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":".pio"}]},{"type":"text","value":": Contains build files, libraries, and more."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":".vscode"}]},{"type":"text","value":": Contains configurations for VSCode. Changes here are usually not necessary."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"include"}]},{"type":"text","value":": Header files can be placed here."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"lib"}]},{"type":"text","value":": Libraries for the project."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"src"}]},{"type":"text","value":": Main code files. Your "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"main.c"}]},{"type":"text","value":" belongs here."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"test"}]},{"type":"text","value":": For unit tests."}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"platformio.ini"}]},{"type":"text","value":": Central configuration file for PlatformIO."}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"platformioini"},"children":[{"type":"text","value":"platformio.ini"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"platformio.ini"}]},{"type":"text","value":" is the central configuration file. Example configuration for ATmega328:"}]},{"type":"element","tag":"pre","props":{"className":"language-ini shiki shiki-themes github-light github-dark","code":"[env:atmega328p]\nplatform = atmelavr\nboard = atmega328p\nframework = none         // if you use Arduino write it here.\nupload_protocol = COM9   // look for your device port\n","language":"ini","meta":"","style":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"element","tag":"span","props":{"class":"line","line":1},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-default:#6F42C1;--shiki-dark:#B392F0"},"children":[{"type":"text","value":"[env:atmega328p]\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":2},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-default:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"platform"}]},{"type":"element","tag":"span","props":{"style":"--shiki-default:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" = atmelavr\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":3},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-default:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"board"}]},{"type":"element","tag":"span","props":{"style":"--shiki-default:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" = atmega328p\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":4},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-default:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"framework"}]},{"type":"element","tag":"span","props":{"style":"--shiki-default:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" = none         // if you use Arduino write it here.\n"}]}]},{"type":"element","tag":"span","props":{"class":"line","line":5},"children":[{"type":"element","tag":"span","props":{"style":"--shiki-default:#D73A49;--shiki-dark:#F97583"},"children":[{"type":"text","value":"upload_protocol"}]},{"type":"element","tag":"span","props":{"style":"--shiki-default:#24292E;--shiki-dark:#E1E4E8"},"children":[{"type":"text","value":" = COM9   // look for your device port\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The platformio.ini is the central configuration file for the project. Multiple environments (e.g., "},{"type":"element","tag":"span","props":{},"children":[{"type":"text","value":"env:esp32dev"}]},{"type":"text","value":") can be created to quickly switch between production and debugging. The file format is in YAML, so be careful with the indentation."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More info here: "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://docs.platformio.org/en/latest/projectconf/index.html","rel":["nofollow"]},"children":[{"type":"text","value":"Project Configuration"}]},{"type":"text","value":" "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"a","props":{"href":"https://docs.platformio.org/en/latest/envvars.html","rel":["nofollow"]},"children":[{"type":"text","value":"Environment Variables"}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"build-debug-upload"},"children":[{"type":"text","value":"Build, Debug, Upload"}]},{"type":"element","tag":"img","props":{"src":"https://hack.depta.dev/uploads/upload_bae93705a813d506fdfc3dbf35b46275.PNG","style":"max-width:50%; height:auto;","alt":""},"children":[]},{"type":"element","tag":"ol","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PIO Home - Opens the PlatformIO homepage"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Build - Build the project"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Upload - Upload the project to the microcontroller"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Clean - Clean build files"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Test - Start unit tests or invoke the environment for testing"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Serial Monitor - Serial communication"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Terminal - A terminal with loaded PIO variables"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Environment - Quickly switch the environment"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Serial Monitor Config - Settings for the serial monitor"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"More info here: "},{"type":"element","tag":"a","props":{"href":"https://docs.platformio.org/en/latest/projectconf/build_configurations.html","rel":["nofollow"]},"children":[{"type":"text","value":"https://docs.platformio.org/en/latest/projectconf/build_configurations.html"}]}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"installation","depth":2,"text":"Installation","children":[{"id":"_1-vscode","depth":3,"text":"1. VSCode"},{"id":"_2-platformio-extension","depth":3,"text":"2. PlatformIO Extension"}]},{"id":"creating-a-project","depth":2,"text":"Creating a Project"},{"id":"platformio-folder-structure","depth":2,"text":"PlatformIO Folder Structure"},{"id":"platformioini","depth":2,"text":"platformio.ini"},{"id":"build-debug-upload","depth":2,"text":"Build, Debug, Upload"}]}},"_type":"markdown","_id":"content:articles:10.Platformio.md","_source":"content","_file":"articles/10.Platformio.md","_stem":"articles/10.Platformio","_extension":"md"},{"_path":"/articles/messparkour-sv2","_dir":"articles","_draft":false,"_partial":false,"_locale":"","title":"Messparkour SV2","description":"Praxisaufgabe SS2025","cover":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/schaltungen/oszi.jpg?raw=true","author":{"name":"Marc Nauendorf","avatarUrl":"https://pbs.twimg.com/profile_images/1042510623962275840/1Iw_Mvud_400x400.jpg"},"date":"2022-08-23T00:00:00.000Z","layout":"page","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"messparkour-sv2"},"children":[{"type":"text","value":"Messparkour SV2"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Verantwortlicher: Marc Nauendorf"}]},{"type":"text","value":" | "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Bewertung: 50 Punkte (Praxisteil) + 50 Punkte (Theorie) bei Herr Klemm"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Beide Teile müssen bestanden"}]},{"type":"text","value":" werden um SV2 zu bestehen."}]}]},{"type":"element","tag":"h2","props":{"id":"vorwort"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Vorwort"}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; gap: 20px;"},"children":[{"type":"element","tag":"div","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In diesem "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Praxisteil von Signalverarbeitung 2"}]},{"type":"text","value":" erwartet euch ein spannender Messparkour, der in "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"drei primären Präsenzterminen"}]},{"type":"text","value":" organisiert ist."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In diesen Terminen könnt ihr eigenständig eure Arbeiten durchführen, wie in den "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"nachfolgenden Abschnitten beschrieben."}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Die Labortermine sind in "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"erster Linie"}]},{"type":"text","value":" dazu gedacht, offene Fragen zu klären, euch während des praktischen Vorgehens zu "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"unterstützen"}]},{"type":"text","value":" und den Übergang von der theoretischen Vorbereitung zur praktischen Anwendung zu erleichtern."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ich freue mich auf eure engagierte Mitarbeit und wünsche euch viel Erfolg bei der Durchführung des Messparkours."}]}]},{"type":"element","tag":"div","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/gif/oszi.gif?raw=true","alt":"Oszi GIF"},"children":[]}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Bemerkung: Die jenigen die mit ihrem Microcontroller schon anfangen möchte, kann das gerne tun. Man kann die Arbeiten auch mit AtmelChips o.ä. bearbeiten. Wichtig: "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Das Arduino Framework ist das einzige was ihr nicht nutzen dürft, sonst ist alles erlaubt."}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"PS:"}]},{"type":"text","value":" Zugang für Labor bei "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.hs-heilbronn.de/de/martin.ballein"},"children":[{"type":"text","value":"Herr Ballein"}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Termine:"}]},{"type":"text","value":" "},{"type":"element","tag":"br","props":{},"children":[]},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://splan.hs-heilbronn.de/"},"children":[{"type":"text","value":"Splan"}]}]},{"type":"text","value":" | Die Tage die angegeben sind, sind bei euch (SEB3) ohne Kurse."}]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"Datum"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"Uhrzeit"}]},{"type":"element","tag":"th","props":{},"children":[{"type":"text","value":"Thema"}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"16.04.25"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"09:45 - 13:00 Uhr"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Spannungsteiler & Low/High pass filter"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"30.04.25"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"09:45 - 13:00 Uhr"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"I²C"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"21.05.25"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"09:45 - 13:00 Uhr"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"PWM & Servo"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Abgabezeitpunkt"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"bis 01.07.2025"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://ilias.hs-heilbronn.de/ilias.php?baseClass=ilrepositorygui&cmdNode=yc:ni&cmdClass=ilObjFolderGUI&ref_id=918744"},"children":[{"type":"text","value":"Hochzuladen im Ilias Kurs"}]}]}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"termin-1-spannungsteiler-highlowpass-filter"},"children":[{"type":"text","value":"📅 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Termin 1: Spannungsteiler & High&LowPass Filter"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Themen:"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Spannungsteiler"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Berechne verschiedene Spannungsteiler-Konfigurationen unter Verwendung von Widerständen."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vergleiche die theoretisch berechneten Werte mit praktischen Messungen."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Hoch- und Tiefpassfilter"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Untersuche den Aufbau und die Funktionsweise von passiven Hoch- und Tiefpassfiltern."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Berechne die Grenzfrequenz und vergleiche die Ergebnisse."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Material & Referenz:"}]},{"type":"text","value":" "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.electronics-tutorials.ws/de/filtern/passiver-hochpassfilter.html"},"children":[{"type":"text","value":"Passiver Hochpassfilter"}]}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.youtube.com/watch?v=lagfhNjMuQM"},"children":[{"type":"text","value":"Video Tutorial"}]}]}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"h4","props":{"id":"vorbereitung"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Vorbereitung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Selbstständiges aneignen der Themen"}]},{"type":"text","value":" High&Low Pass Filter + Spannungsteiler"}]}]},{"type":"element","tag":"h4","props":{"id":"labortermin"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"LaborTermin"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aufbauen eurer errechneten Schaltungen mit Freqenzgenerator & Netzteil"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Bearbeiten der Themenfelder mit Osziloskop & Multimeter"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Am Ende die Ausgabe eines "},{"type":"element","tag":"a","props":{"href":"https://www.raspberrypi.com/documentation/microcontrollers/pico-series.html#pico-1-technical-specification"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Pi Pico´s"}]}]},{"type":"text","value":" mit einem I²C Bauteil"}]}]},{"type":"element","tag":"h4","props":{"id":"nachbereitung"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Nachbereitung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dokumentation"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Vergleiche gemessene Spannungswerte mit den Berechnungen."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Analysiere, wie sich Widerstandsänderungen auf die Kondensator-Entladekurve auswirken."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PDF o.ä. mit Berechnungen, Messdaten & Fehleranalyse."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"termin-2-ic-protokoll-datenpakete"},"children":[{"type":"text","value":"📅 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Termin 2: I²C Protokoll & DatenPakete"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Themen:"}]}]},{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"I²C Protocoll"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Adressierung, Clock Speed sowie Read and Write Funktionalitäten."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Material & Referenz:"}]},{"type":"text","value":" "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.wikibooks.org/wiki/C-Programmierung_mit_AVR-GCC/_I2C"},"children":[{"type":"text","value":"I²C-Wikibooks"}]}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2612271.htm"},"children":[{"type":"text","value":"Elektronik-Kompendium"}]}]}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Programmieren des Mikrocontrollers"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Das Programmieren des Mikrocontrollers : Raspberry Pi Pico zur Handhabung des I²C Protokolls."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"Material & Referenz:"}]},{"type":"text","value":" "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://docs.micropython.org/en/latest/rp2/quickref.html#pwm"},"children":[{"type":"text","value":"MicroPython-PWM-Tutorials"}]}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.elektronik-kompendium.de/sites/raspberry-pi/2612271.htm"},"children":[{"type":"text","value":"I²C Micropython"}]}]},{"type":"text","value":", "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.youtube.com/watch?v=092xFEmAS98"},"children":[{"type":"text","value":"code_tutorial"}]}]}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"h4","props":{"id":"vorbereitung-1"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Vorbereitung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Selbstständiges Aneignen der theoretischen Grundlagen zu MicroPython"}]},{"type":"text","value":" \n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"I²C funktionalität herstellen "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"bis zum 2.ten Termin"}]}]}]},{"type":"element","tag":"h4","props":{"id":"labortermin-1"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"LaborTermin"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Messtechnische Darstellung, Auslesung und Analyse der I²C Pakete "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"über das Oszilloskop"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Identifiziere mögliche Fehlerquellen und erstelle Messbilder, die von positiven bis negativen Werten reichen."}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Am Ende die Ausgabe von einem Servo-Motor für Termin 3"}]}]},{"type":"element","tag":"h4","props":{"id":"nachbereitung-1"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Nachbereitung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dokumentation"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Festhalten der Oszilloskop- und Multimetermessungen in einem Messprotokoll."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Analyse von Oszilloskop-Screenshots der SCL- und SDA-Signale."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Zeigen und Bewerten von "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Good & Bad Cases"}]}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"termin-3-servomotorsteuerung-mit-pwm-abschluss"},"children":[{"type":"text","value":"📅 "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Termin 3: Servomotorsteuerung mit PWM (Abschluss)"}]}]},{"type":"element","tag":"div","props":{"style":"display: flex; align-items: center; gap: 20px;"},"children":[{"type":"element","tag":"div","props":{},"children":[{"type":"element","tag":"ol","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Schaltungsdesign und Steuerung"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Ansteuerung eines "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Servomotors"}]},{"type":"text","value":" mithilfe von "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"PWM"}]},{"type":"text","value":" auf dem Raspberry Pi Pico."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Steuerung "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"mit Potentiometer"}]},{"type":"text","value":", um ein einstellbares Eingangssignal zu erzeugen."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Zusammenhang"}]},{"type":"text","value":" zwischen der Potentiometerstellung (Input) und der resultierenden Servomotorausrichtung (Output) herstellen."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]}]},{"type":"element","tag":"div","props":{},"children":[{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/gif/servo.gif?raw=true","alt":"Servo GIF"},"children":[]}]}]},{"type":"element","tag":"h3","props":{"id":"praktische-umsetzung"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Praktische Umsetzung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Implementiere den PWM-Ausgang, um das Steuersignal für den Servomotor zu erzeugen."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Setze den Steueralgorithmus in Verbindung mit dem Eingangssignal um, sodass der Servomotor entsprechend ausgerichtet wird."}]}]},{"type":"element","tag":"h4","props":{"id":"vorbereitung-2"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Vorbereitung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Eigenständiges Erarbeiten des Schaltungsdesigns."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aneignung der Funktionen und Steuerungslogik eines "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.upesy.com/blogs/tutorials/esp32-servo-motor-sg90-on-micropython"},"children":[{"type":"text","value":"Servomotors"}]}]},{"type":"text","value":" (z. B. Winkelbereich, PWM-Spezifikationen)."}]}]},{"type":"element","tag":"h4","props":{"id":"labortermin-2"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"LaborTermin"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Aufbau der geplanten Schaltung und Integration des Spannungsteilers zur Signalerzeugung. (mit Potentiometer)"}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Erfassung der PWM-Signale und Überprüfung des Versuchsaufbaus."}]},{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mapping von Potentiometer auf Grad (Servo)"}]}]},{"type":"element","tag":"h4","props":{"id":"nachbereitung-2"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Nachbereitung"}]}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dokumentation"}]},{"type":"text","value":"\n    "},{"type":"element","tag":"ul","props":{},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Detaillierte Darstellung des Schaltplans, eingesetzten Codes und gesammelten Messdaten."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Mathematische Analyse des Zusammenhangs zwischen Eingangssignal und Servomotorposition."}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"dokumentation"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Dokumentation"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Die Dokumentation soll in "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"maximal 10 DIN A4 Seiten"}]},{"type":"text","value":" gehalten werden und umfasst insbesondere folgende Elemente:"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"• "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Messprotokolle"}]},{"type":"text","value":", in denen alle relevanten Messdaten, Beobachtungen und Praxisergebnisse festgehalten werden."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n• "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Detaillierte Beschreibungen"}]},{"type":"text","value":" der Versuchsaufbauten, einschließlich der verwendeten Materialien, Schaltungen und angewandten Methoden."},{"type":"element","tag":"br","props":{},"children":[]},{"type":"text","value":"\n• "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Erkenntnisse und Analysen"}]},{"type":"text","value":", welche die Zusammenhänge zwischen den theoretischen Grundlagen und den praktischen Ergebnissen verdeutlichen."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Der Abgabezeitpunkt"}]},{"type":"text","value":" | bis 01.07.2025 | "},{"type":"element","tag":"strong","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://ilias.hs-heilbronn.de/ilias.php?baseClass=ilrepositorygui&cmdNode=yc:ni&cmdClass=ilObjFolderGUI&ref_id=918744"},"children":[{"type":"text","value":"Hochzuladen hier im Ilias Kurs"}]}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"vorwort","depth":2,"text":"Vorwort"},{"id":"termin-1-spannungsteiler-highlowpass-filter","depth":2,"text":"📅 Termin 1: Spannungsteiler & High&LowPass Filter"},{"id":"termin-2-ic-protokoll-datenpakete","depth":2,"text":"📅 Termin 2: I²C Protokoll & DatenPakete"},{"id":"termin-3-servomotorsteuerung-mit-pwm-abschluss","depth":2,"text":"📅 Termin 3: Servomotorsteuerung mit PWM (Abschluss)","children":[{"id":"praktische-umsetzung","depth":3,"text":"Praktische Umsetzung"}]},{"id":"dokumentation","depth":2,"text":"Dokumentation"}]}},"_type":"markdown","_id":"content:articles:messparkour-Sv2.md","_source":"content","_file":"articles/messparkour-Sv2.md","_stem":"articles/messparkour-Sv2","_extension":"md"},{"_path":"/projects","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Projects","description":null,"layout":"default","head":{"title":"Projects"},"body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"my-projects"},"children":[{"type":"text","value":"My Projects"}]},{"type":"element","tag":"div","props":{"className":["projects-container"]},"children":[{"type":"text","value":"\n  "},{"type":"element","tag":"a","props":{"href":"/projects/develop_pc","className":["project-card"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/minipc/1st_try_mit_wasser.gif?raw=true","alt":"Develop PC Projektbild","className":["project-card__image"]},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["project-card__content"]},"children":[{"type":"text","value":"\n      "},{"type":"element","tag":"div","props":{"className":["project-card__title"]},"children":[{"type":"text","value":"Develop PC"}]},{"type":"text","value":"\n      "},{"type":"element","tag":"div","props":{"className":["project-card__desc"]},"children":[{"type":"text","value":"Projekt zur Entwicklung eines individuellen PCs. Siehe Details in "},{"type":"element","tag":"code","props":{},"children":[{"type":"text","value":"develop_pc.md"}]},{"type":"text","value":"."}]},{"type":"text","value":"\n      "},{"type":"element","tag":"div","props":{"className":["project-card__tags"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"span","props":{"className":["project-card__tag"]},"children":[{"type":"text","value":"Hardware"}]},{"type":"text","value":"\n        "},{"type":"element","tag":"span","props":{"className":["project-card__tag"]},"children":[{"type":"text","value":"Planung"}]},{"type":"text","value":"\n      "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n  "}]}]},{"type":"element","tag":"style","props":{},"children":[{"type":"text","value":"\n.projects-container {\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  gap: 20px;\n  background-color: transparent;\n}\n\n@media (max-width: 768px) {\n  .projects-container {\n    grid-template-columns: 1fr;\n  }\n}\n"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:projects.md","_source":"content","_file":"projects.md","_stem":"projects","_extension":"md"},{"_path":"/projects/develop_pc","_dir":"projects","_draft":false,"_partial":false,"_locale":"","title":"Developing a Mini PC","description":"Custom-built mini PC with water features","body":{"type":"root","children":[{"type":"element","tag":"div","props":{"className":["image-row"],"style":"display: flex; gap: 15px; margin: 20px 0;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/minipc/LattePanda.jpg?raw=true","alt":"LattePanda","style":"width: 33%;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/minipc/1st_try_mit_wasser.gif?raw=true","alt":"First try with water","style":"width: 33%;"},"children":[]},{"type":"text","value":"\n    "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/minipc/in_process.jpg?raw=true","alt":"In process","style":"width: 33%;"},"children":[]}]},{"type":"element","tag":"div","props":{"style":"text-align: center; margin-bottom: 20px; font-style: italic;"},"children":[{"type":"text","value":"\n    Only PC without power supply & screen\n"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The following sections focus entirely on the PC. An "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"NVIDIA"}]},{"type":"text","value":" graphics card is "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"not recommended"}]},{"type":"text","value":" due to issues with Linux drivers.\nIt was used simply because it was available, and to replicate the dimensions of the Quadro graphics card and adjust the mounting holes."}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"h1","props":{"id":"parts"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Parts"}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"table","props":{},"children":[{"type":"element","tag":"thead","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"th","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Group"}]}]},{"type":"element","tag":"th","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Component"}]}]},{"type":"element","tag":"th","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Description"}]}]},{"type":"element","tag":"th","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Link"}]}]}]}]},{"type":"element","tag":"tbody","props":{},"children":[{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Computing Hardware"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"LattePanda Mini PC"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Mini PC with Windows or Linux support."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.dfrobot.com/product-1729.html","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"NVIDIA Quadro 4000"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"High-performance GPU for graphics and compute-intensive applications."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.nvidia.com/content/dam/en-zz/Solutions/design-visualization/quadro-product-literature/quadro-rtx-4000-data-sheet-us-nvidia-830682-r6-web.pdf","rel":["nofollow"]},"children":[{"type":"text","value":"Datasheet"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"PCIe Adapter for LattePanda"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Expansion for the LattePanda to integrate PCIe cards like GPUs."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.dfrobot.com/product-2292.html","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"400-Watt Power Supply"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Power supply for the LattePanda and connected components."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"-"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"SSD Case RGB"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"20Gbps SSD Connection for storage"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.amazon.de/dp/B0CVNPRW1Y/ref=twister_B0D8R7BJNZ?_encoding=UTF8","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"SSD NVMe 500gb"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"a compatible SSD for the high performance cases"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.amazon.de/SanDisk-einfache-Installation-Dashboard-Garantie/dp/B0CN3PBS2Z/ref=sr_1_11?__mk_de_DE=%C3%85M%C3%85%C5%BD%C3%95%C3%91&s=computers&sr=1-11","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Fluid System Components"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Plastic Tube 66mm"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Plastic tube with a 66 mm diameter."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005007636427535.html?spm=a2g0o.order_list.order_list_main.225.65b85c5fuGsIUM&gatewayAdapt=glo2deu","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"1m Hose"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Flexible hose for connecting components in fluid systems."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005003242691209.html?spm=a2g0o.order_list.order_list_main.220.65b85c5fuGsIUM&gatewayAdapt=glo2deu","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Check Valve"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Prevents backflow in fluid systems."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005001411693525.html?spm=a2g0o.order_list.order_list_main.215.65b85c5fuGsIUM&gatewayAdapt=glo2deu","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Electric Valve"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Electrically operated valve for controlling fluid flow."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005005779605656.html?spm=a2g0o.productlist.main.35.48192c1cKK2OaR&algo_pvid=9a96b436-c528-4c42-b58c-643d7bead010&utparam-url=scene%3Asearch%7Cquery_from%3A","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Membrane Air Pump"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Pump for generating air bubbles inside the plastic tube."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005007636427535.html?spm=a2g0o.order_list.order_list_main.225.65b85c5fuGsIUM&gatewayAdapt=glo2deu","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Bubble Stone"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Creates fine air bubbles in fluid or water systems."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005006467081651.html?spm=a2g0o.order_list.order_list_main.230.65b85c5fuGsIUM&gatewayAdapt=glo2deu","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Electronics"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Reed Relay"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Electrical relay for controlling the membrane air pump."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"-"}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"WS28 LED Ring (12 LEDs)"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"RGB LED ring with 12 individually addressable LEDs for lighting effects."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/4001061749100.html?spm=a2g0o.productlist.main.1.2a6c38abwWlxTH&algo_pvid=ef3cb399-c448-4661-aaae-1a78028cdfe7&utparam-url=scene%3Asearch%7Cquery_from%3A","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Antennas"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Components for improving wireless signal reception."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://de.aliexpress.com/item/1005006108506933.html?spm=a2g0o.order_list.order_list_main.260.65b85c5fuGsIUM&gatewayAdapt=glo2deu","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"12V AMD Fan RGB"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"RGB cooling fan for efficient & stylish heat dissipation."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://geizhals.de/amd-wraith-prism-712-000075-a1980869.html","rel":["nofollow"]},"children":[{"type":"text","value":"Product Page"}]}]}]},{"type":"element","tag":"tr","props":{},"children":[{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"3D Printing Materials"}]}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"2kg Filament HIPS"}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Filament for 3D printing, designed for electric case."}]},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"-"}]}]}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"h2","props":{"id":"fundation"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Fundation"}]}]},{"type":"element","tag":"div","props":{"style":"height: 10px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n        Used software to configure and program the LattePanda. The computer is capable of running as Windows, Linux, Android, or Hackintosh (Apple). \n        "}]},{"type":"text","value":"\n        You can find the OS documentation "},{"type":"element","tag":"a","props":{"href":"https://docs.lattepanda.com/content/alpha_edition/os/"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":".\n        "},{"type":"text","value":"\n        Hardware interface dokumentation "},{"type":"element","tag":"a","props":{"href":"https://docs.lattepanda.com/content/delta_edition/io_playability/"},"children":[{"type":"text","value":"here"}]},{"type":"text","value":"\n        "},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"element","tag":"div","props":{"className":["table-responsive"]},"children":[{"type":"element","tag":"table","props":{"className":["table"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"thead","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"th","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Software"}]}]},{"type":"text","value":"\n            "},{"type":"element","tag":"th","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Description"}]}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://code.visualstudio.com/"},"children":[{"type":"text","value":"VS Code"}]},{"type":"text","value":" & "},{"type":"element","tag":"a","props":{"href":"https://platformio.org/"},"children":[{"type":"text","value":"PlatformIO"}]}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"Programming the onboard Leonardo µC (for pump & LEDs)"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.raspberrypi.com/software/"},"children":[{"type":"text","value":"Pi Manager"}]}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"For generate bootstick"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://ultimaker.com/software/ultimaker-cura"},"children":[{"type":"text","value":"Cura"}]}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"3D Printing slicing and preparation"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://www.autodesk.com/products/fusion-360/overview"},"children":[{"type":"text","value":"Fusion 360"}]}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{},"children":[{"type":"text","value":"CAD design and 3D modeling"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]}]},{"type":"text","value":"     \n    "}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"benchmarks"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Benchmarks"}]}]},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n        For interest in \"best possible performance\", you can watch this video.\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n        The limitation of my system is definitely the graphics card. Warcraft 3 is playable at 20FPS (Max Settings) & League of Legends at 40FPS (Max Settings).\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n        I myself prefer using emulators like "},{"type":"element","tag":"a","props":{"href":"https://xemu.app/"},"children":[{"type":"text","value":"Xemu"}]},{"type":"text","value":" or "},{"type":"element","tag":"a","props":{"href":"https://pcsx2.net/"},"children":[{"type":"text","value":"PCSX2"}]},{"type":"text","value":".\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n        The "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"performance is flawless"}]},{"type":"text","value":" there, but it's more about nostalgia than performance.   \n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["video-preview"]},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"iframe","props":{"width":"100%","height":315,"src":"https://www.youtube.com/embed/PCd3HtRfQ8k","title":"YouTube video player","frameBorder":"0","allow":"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture","allowFullScreen":true},"children":[]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h1","props":{"id":"electical-system"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Electical System"}]}]},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/minipc/Schaltplan.JPG?raw=true","alt":"Electrical System Schaltplan","style":"width: 100%;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"hr","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"component-table"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Component Table"}]}]},{"type":"element","tag":"table","props":{"border":1,"style":"border-collapse: collapse; width: 100%;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"thead","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"th","props":{"style":"font-weight: normal; padding: 8px;"},"children":[{"type":"text","value":"Component"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"th","props":{"style":"font-weight: normal; padding: 8px;"},"children":[{"type":"text","value":"Pin Setup"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"th","props":{"style":"font-weight: normal; padding: 8px;"},"children":[{"type":"text","value":"Info"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"tbody","props":{},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"Latte Panda"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"+12V, GND, Relay, LED Strip, Knob 5V & Data"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"Built-in Leonardo for pump & LED control"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"GPU Adapter"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"+12V, +5V, GND, Panda"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"Direct connection to Latte Panda"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"Relay"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"+5V, GND, +5V, Leonardo"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"Reed Relay – consider a transistor alternative"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"Fan"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"+12V, GND, PWM, (RGB Data)"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"RGB self-control mode"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"tr","props":{},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"LED Strip"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":"+5V, Leonardo, GND"}]},{"type":"text","value":"\n            "},{"type":"element","tag":"td","props":{"style":"padding: 8px;"},"children":[{"type":"text","value":" ws28 3pin"}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["image-row"],"style":"display: flex; gap: 15px; margin: 20px 0;"},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"width: 50%;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["note"]},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"text","value":" The 400W power supply must be bridged so that both the 12V and 5V outputs are available when connected and activated. This crucial step ensures that all connected components receive the proper voltage reliably."}]},{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"At the main connector of the power supply, wires 14 and 16 are shorted, with wire 16 serving as ground."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"style":"width: 50%; text-align: center;"},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/nuxt-app/assets/pictures/minipc/stecker.png?raw=true","alt":"ATX Connector Setup Diagram","style":"max-height: 200px; width: auto;"},"children":[]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"style":"margin-top: 10px; font-style: italic;"},"children":[{"type":"text","value":"ATX Connector Setup Diagram"}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"h1","props":{"id":"fluid-system"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Fluid System"}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n            The Stop Valve functions as a check valve and forms the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"theoretical boundary between air and water"}]},{"type":"text","value":". It prevents water from flowing back and separates the zones.\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n            The Magnetic Valve is open when no voltage is applied (i.e., without power). Once the PC or system is supplied with power, it closes. This mechanism enables targeted venting of the pipeline behind the check valve. The pump, "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"when idle, slowly allows air to escape"}]},{"type":"text","value":", which can lead to "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"unpredictable pressure conditions"}]},{"type":"text","value":". Without venting, the pressure behind the check valve might build up and trigger it uncontrollably. By opening the Magnetic Valve during a power loss, air is "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"actively vented"}]},{"type":"text","value":" so that the pressure remains stable and the check valve opens only when required—such as during pump operation.\n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/fluidsystems.JPG?raw=true","alt":"Fluid System Diagram","className":["img-fluid","rounded"],"style":"width:100%; height:auto;"},"children":[]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6","text-center"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/oszi.gif?raw=true","alt":"Oscilloscope Gif","className":["img-fluid","rounded"],"style":"width:70%;"},"children":[]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The pump is operated by a relay driven by a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"PWM signal from the onboard Leonardo chip"}]},{"type":"text","value":". A random value between 0 and 255 is selected, and the corresponding signal is applied to the relay’s control pin, allowing for precise control of the pump’s strength. A reed relay, known for its "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"silent magnetic switching"}]},{"type":"text","value":", is used instead of traditional noisier relays. It is also worth noting that a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"classic transistor would be the best choice"}]},{"type":"text","value":" for improved efficiency and reliability."}]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"h1","props":{"id":"_3d-design"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"3D Design"}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"a","props":{"href":"https://github.com/Nr44suessauer/nr44suessauer.github.io/tree/main/assets/3Dprojects"},"children":[{"type":"text","value":"Full file available for download [here]"}]},{"type":"text","value":"."}]},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The power connections are Tx60 Female, and the HDMI output comes with an adapter (DPort -> HDMI)."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The flaps can be modified or fitted with additional USB ports. The bottom is designed with a "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"grid structure"}]},{"type":"text","value":" to ensure that any water leakage does not accumulate inside the case."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The RGB fan can be inserted into the duct, effectively "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"cooling"}]},{"type":"text","value":" the "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"backside"}]},{"type":"text","value":" of both the graphics card and the Latte Panda. Additionally, the grid structure at the bottom functions as an air outlet."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"An "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"LED ring"}]},{"type":"text","value":" is attached within the tube, and the cables run through the case to the Latte Panda."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Please note that press-fit sleeves and screws are required."}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["note"]},"children":[{"type":"text","value":"\n            "},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Note:"}]},{"type":"text","value":" The tube was originally a paintbrush packaging. It is therefore advisable to adjust the placeholder to match the size of the material actually available."}]},{"type":"text","value":"\n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6","text-center"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/AnimationDevelopPc.gif?raw=true","alt":"Animation Develop Pc","className":["img-fluid","rounded"],"style":"width:100%;"},"children":[]},{"type":"text","value":"\n    "}]}]},{"type":"element","tag":"div","props":{"style":"height: 50px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["row","mt-3"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n        {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/skellet.PNG?raw=true\" class=\"img-fluid rounded z-depth-1\" style=\"max-width:80%;\" zoomable=true %}\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n        {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/baseplate.PNG?raw=true\" class=\"img-fluid rounded z-depth-1\" style=\"max-width:80%;\" zoomable=true %}\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n        {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/back.PNG?raw=true\" class=\"img-fluid rounded z-depth-1\" style=\"max-width:80%;\" zoomable=true %}\n    "}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"h1","props":{"id":"future-design-additions"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"\"Future Design additions\""}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["row","align-items-center"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6","text-center"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/mewtwo.gif?raw=true","alt":"Mewtwo Gif","className":["img-fluid"],"style":"width:70%;"},"children":[]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["col-md-6"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"h4","props":{"id":"mewtwo-in-the-tank"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Mewtwo in the Tank"}]}]},{"type":"text","value":"\n        "},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"\n            Mewtwo will be housed in this lab tank. This eye-catching centerpiece reinforces the experimental spirit of the project but also "},{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"symbolizes a harmonious blend of art."}]},{"type":"text","value":" Additionally, this file has significantly influenced the design from the very beginning.\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-12","text-center"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"img","props":{"src":"https://imgflip.com/s/meme/Laughing-Leo.png","alt":"Calvincandy Django Gif","className":["img-fluid"],"style":"width:30%; margin-top:15px;"},"children":[]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n    "}]}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"h1","props":{"id":"gallery"},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"Gallery"}]}]},{"type":"element","tag":"div","props":{"style":"height: 20px;"},"children":[]},{"type":"element","tag":"div","props":{"className":["gallery"]},"children":[{"type":"text","value":"\n    "},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["row"]},"children":[{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/1st_try_mit_wasser.gif?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/in_process.jpg?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/LattePanda.jpg?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/im_office.jpg?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n    "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/waterservice.jpg?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/setupA.jpg?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n        "},{"type":"element","tag":"div","props":{"className":["col-sm","mt-3","mt-md-0"]},"children":[{"type":"text","value":"\n            {% include figure.liquid loading=\"eager\" path=\"https://github.com/Nr44suessauer/nr44suessauer.github.io/blob/main/assets/img/minipc/SetupB.jpg?raw=true\" class=\"img-fluid rounded z-depth-1\" zoomable=true %}\n        "}]},{"type":"text","value":"\n    "}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"fundation","depth":2,"text":"Fundation"},{"id":"benchmarks","depth":2,"text":"Benchmarks"},{"id":"component-table","depth":2,"text":"Component Table"}]}},"_type":"markdown","_id":"content:projects:develop_pc.md","_source":"content","_file":"projects/develop_pc.md","_stem":"projects/develop_pc","_extension":"md"},{"_path":"/projects/project1","_dir":"projects","_draft":false,"_partial":false,"_locale":"","title":"Projekt 1","description":"Hier findest du Details, Features und Screenshots zu Projekt 1.","layout":"default","body":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"projekt-1"},"children":[{"type":"text","value":"Projekt 1"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Hier findest du Details, Features und Screenshots zu Projekt 1."}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Technologie: Vue.js, Firebase"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Status: In Entwicklung"}]}]},{"type":"element","tag":"h2","props":{"id":"interaktive-demo"},"children":[{"type":"text","value":"Interaktive Demo"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Hier kannst du einen interaktiven Zähler ausprobieren:"}]},{"type":"element","tag":"counter","props":{},"children":[]},{"type":"element","tag":"h2","props":{"id":"über-das-projekt"},"children":[{"type":"text","value":"Über das Projekt"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Dieses Projekt demonstriert die Verwendung von Vue.js-Komponenten in Markdown-Dateien mit Nuxt Content.\nDie interaktive Demo zeigt, wie Zustandsverwaltung in einer Vue-Komponente funktioniert."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Weitere Informationen und Updates folgen!"}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"interaktive-demo","depth":2,"text":"Interaktive Demo"},{"id":"über-das-projekt","depth":2,"text":"Über das Projekt"}]}},"_type":"markdown","_id":"content:projects:project1.md","_source":"content","_file":"projects/project1.md","_stem":"projects/project1","_extension":"md"}],"navigation":[{"title":"About","_path":"/","layout":"default"},{"title":"Articles","_path":"/articles","children":[{"title":"Traveling Salesman Problem (TSP)","_path":"/articles/algo-vertretung-14-04-25","layout":"page"},{"title":"Neural Style Transfer","_path":"/articles/neural-style-transfer","layout":"page"},{"title":"CNN | Digit Recognition with Mnist","_path":"/articles/cnn-digit-recognision","layout":"page"},{"title":"Octoprint Server for 3D Printers","_path":"/articles/octoprint-server","layout":"page"},{"title":"PlantUML Installation Guide","_path":"/articles/plant-uml","layout":"page"},{"title":"VsCode & PlatformIO","_path":"/articles/platformio","layout":"article"},{"title":"Messparkour SV2","_path":"/articles/messparkour-sv2","layout":"page"}],"layout":"page"},{"title":"Projects","_path":"/projects","children":[{"title":"Developing a Mini PC","_path":"/projects/develop_pc"},{"title":"Projekt 1","_path":"/projects/project1","layout":"default"}],"layout":"default"}]}