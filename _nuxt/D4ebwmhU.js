import{u as w,a5 as u,r as D,a6 as O,a7 as B,a8 as H,a9 as M,b as R,aa as E,ab as P,ac as N,ad as S,ae as V,af as j,H as z}from"./B89pJThp.js";const K=t=>t==="defer"||t===!1;function I(...t){var g;const n=typeof t[t.length-1]=="string"?t.pop():void 0;typeof t[0]!="string"&&t.unshift(n);let[e,f,a={}]=t;if(typeof e!="string")throw new TypeError("[nuxt] [asyncData] key must be a string.");if(typeof f!="function")throw new TypeError("[nuxt] [asyncData] handler must be a function.");const r=w(),b=f,p=()=>u.value,C=()=>r.isHydrating?r.payload.data[e]:r.static.data[e];a.server??(a.server=!0),a.default??(a.default=p),a.getCachedData??(a.getCachedData=C),a.lazy??(a.lazy=!1),a.immediate??(a.immediate=!0),a.deep??(a.deep=u.deep),a.dedupe??(a.dedupe="cancel");const d=a.getCachedData(e,r),h=d!=null;if(!r._asyncData[e]||!a.immediate){(g=r.payload._errors)[e]??(g[e]=u.errorValue);const i=a.deep?D:O;r._asyncData[e]={data:i(h?d:a.default()),pending:D(!h),error:B(r.payload._errors,e),status:D("idle"),_default:a.default}}const s={...r._asyncData[e]};delete s._default,s.refresh=s.execute=(i={})=>{if(r._asyncDataPromises[e]){if(K(i.dedupe??a.dedupe))return r._asyncDataPromises[e];r._asyncDataPromises[e].cancelled=!0}if(i._initial||r.isHydrating&&i._initial!==!1){const l=i._initial?d:a.getCachedData(e,r);if(l!=null)return Promise.resolve(l)}s.pending.value=!0,s.status.value="pending";const o=new Promise((l,c)=>{try{l(b(r))}catch(y){c(y)}}).then(async l=>{if(o.cancelled)return r._asyncDataPromises[e];let c=l;a.transform&&(c=await a.transform(l)),a.pick&&(c=x(c,a.pick)),r.payload.data[e]=c,s.data.value=c,s.error.value=u.errorValue,s.status.value="success"}).catch(l=>{if(o.cancelled)return r._asyncDataPromises[e];s.error.value=j(l),s.data.value=z(a.default()),s.status.value="error"}).finally(()=>{o.cancelled||(s.pending.value=!1,delete r._asyncDataPromises[e])});return r._asyncDataPromises[e]=o,r._asyncDataPromises[e]},s.clear=()=>T(r,e);const _=()=>s.refresh({_initial:!0}),m=a.server!==!1&&r.payload.serverRendered;{const i=H();if(i&&m&&a.immediate&&!i.sp&&(i.sp=[]),i&&!i._nuxtOnBeforeMountCbs){i._nuxtOnBeforeMountCbs=[];const c=i._nuxtOnBeforeMountCbs;M(()=>{c.forEach(y=>{y()}),c.splice(0,c.length)}),R(()=>c.splice(0,c.length))}m&&r.isHydrating&&(s.error.value||d!=null)?(s.pending.value=!1,s.status.value=s.error.value?"error":"success"):i&&(r.payload.serverRendered&&r.isHydrating||a.lazy)&&a.immediate?i._nuxtOnBeforeMountCbs.push(_):a.immediate&&_();const o=V();if(a.watch){const c=E(a.watch,()=>s.refresh());o&&P(c)}const l=r.hook("app:data:refresh",async c=>{(!c||c.includes(e))&&await s.refresh()});o&&P(l)}const v=Promise.resolve(r._asyncDataPromises[e]).then(()=>s);return Object.assign(v,s),v}async function U(t){await new Promise(e=>N(e));const n=t?S(t):void 0;await w().hooks.callHookParallel("app:data:refresh",n)}function T(t,n){n in t.payload.data&&(t.payload.data[n]=void 0),n in t.payload._errors&&(t.payload._errors[n]=u.errorValue),t._asyncData[n]&&(t._asyncData[n].data.value=void 0,t._asyncData[n].error.value=u.errorValue,t._asyncData[n].pending.value=!1,t._asyncData[n].status.value="idle"),n in t._asyncDataPromises&&(t._asyncDataPromises[n]&&(t._asyncDataPromises[n].cancelled=!0),t._asyncDataPromises[n]=void 0)}function x(t,n){const e={};for(const f of n)e[f]=t[f];return e}export{U as r,I as u};
